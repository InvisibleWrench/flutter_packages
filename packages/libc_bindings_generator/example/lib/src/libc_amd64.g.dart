// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// LibCPlatformBackendGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names, camel_case_types, unnecessary_brace_in_string_interps, unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// libc backend for amd64
class LibCPlatformBackend {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibCPlatformBackend(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibCPlatformBackend.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int ioctl(
    int __fd,
    int __request,
  ) {
    return _ioctl(
      __fd,
      __request,
    );
  }

  late final _ioctl_ptr = _lookup<ffi.NativeFunction<Native_ioctl>>('ioctl');
  late final _dart_ioctl _ioctl = _ioctl_ptr.asFunction<_dart_ioctl>();

  int epoll_create(
    int __size,
  ) {
    return _epoll_create(
      __size,
    );
  }

  late final _epoll_create_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_create>>('epoll_create');
  late final _dart_epoll_create _epoll_create =
      _epoll_create_ptr.asFunction<_dart_epoll_create>();

  int epoll_create1(
    int __flags,
  ) {
    return _epoll_create1(
      __flags,
    );
  }

  late final _epoll_create1_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_create1>>('epoll_create1');
  late final _dart_epoll_create1 _epoll_create1 =
      _epoll_create1_ptr.asFunction<_dart_epoll_create1>();

  int epoll_ctl(
    int __epfd,
    int __op,
    int __fd,
    ffi.Pointer<epoll_event> __event,
  ) {
    return _epoll_ctl(
      __epfd,
      __op,
      __fd,
      __event,
    );
  }

  late final _epoll_ctl_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_ctl>>('epoll_ctl');
  late final _dart_epoll_ctl _epoll_ctl =
      _epoll_ctl_ptr.asFunction<_dart_epoll_ctl>();

  int epoll_wait(
    int __epfd,
    ffi.Pointer<epoll_event> __events,
    int __maxevents,
    int __timeout,
  ) {
    return _epoll_wait(
      __epfd,
      __events,
      __maxevents,
      __timeout,
    );
  }

  late final _epoll_wait_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_wait>>('epoll_wait');
  late final _dart_epoll_wait _epoll_wait =
      _epoll_wait_ptr.asFunction<_dart_epoll_wait>();

  ffi.Pointer<ffi.Int32> errno_location() {
    return _errno_location();
  }

  late final _errno_location_ptr =
      _lookup<ffi.NativeFunction<Native_errno_location>>('__errno_location');
  late final _dart_errno_location _errno_location =
      _errno_location_ptr.asFunction<_dart_errno_location>();

  int open(
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    return _open(
      __file,
      __oflag,
    );
  }

  late final _open_ptr = _lookup<ffi.NativeFunction<Native_open>>('open');
  late final _dart_open _open = _open_ptr.asFunction<_dart_open>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _close_ptr = _lookup<ffi.NativeFunction<Native_close>>('close');
  late final _dart_close _close = _close_ptr.asFunction<_dart_close>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _read_ptr = _lookup<ffi.NativeFunction<Native_read>>('read');
  late final _dart_read _read = _read_ptr.asFunction<_dart_read>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrp_ptr =
      _lookup<ffi.NativeFunction<Native_tcgetpgrp>>('tcgetpgrp');
  late final _dart_tcgetpgrp _tcgetpgrp =
      _tcgetpgrp_ptr.asFunction<_dart_tcgetpgrp>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrp_ptr =
      _lookup<ffi.NativeFunction<Native_tcsetpgrp>>('tcsetpgrp');
  late final _dart_tcsetpgrp _tcsetpgrp =
      _tcsetpgrp_ptr.asFunction<_dart_tcsetpgrp>();

  int cfgetospeed(
    ffi.Pointer<termios> __termios_p,
  ) {
    return _cfgetospeed(
      __termios_p,
    );
  }

  late final _cfgetospeed_ptr =
      _lookup<ffi.NativeFunction<Native_cfgetospeed>>('cfgetospeed');
  late final _dart_cfgetospeed _cfgetospeed =
      _cfgetospeed_ptr.asFunction<_dart_cfgetospeed>();

  int cfgetispeed(
    ffi.Pointer<termios> __termios_p,
  ) {
    return _cfgetispeed(
      __termios_p,
    );
  }

  late final _cfgetispeed_ptr =
      _lookup<ffi.NativeFunction<Native_cfgetispeed>>('cfgetispeed');
  late final _dart_cfgetispeed _cfgetispeed =
      _cfgetispeed_ptr.asFunction<_dart_cfgetispeed>();

  int cfsetospeed(
    ffi.Pointer<termios> __termios_p,
    int __speed,
  ) {
    return _cfsetospeed(
      __termios_p,
      __speed,
    );
  }

  late final _cfsetospeed_ptr =
      _lookup<ffi.NativeFunction<Native_cfsetospeed>>('cfsetospeed');
  late final _dart_cfsetospeed _cfsetospeed =
      _cfsetospeed_ptr.asFunction<_dart_cfsetospeed>();

  int cfsetispeed(
    ffi.Pointer<termios> __termios_p,
    int __speed,
  ) {
    return _cfsetispeed(
      __termios_p,
      __speed,
    );
  }

  late final _cfsetispeed_ptr =
      _lookup<ffi.NativeFunction<Native_cfsetispeed>>('cfsetispeed');
  late final _dart_cfsetispeed _cfsetispeed =
      _cfsetispeed_ptr.asFunction<_dart_cfsetispeed>();

  int cfsetspeed(
    ffi.Pointer<termios> __termios_p,
    int __speed,
  ) {
    return _cfsetspeed(
      __termios_p,
      __speed,
    );
  }

  late final _cfsetspeed_ptr =
      _lookup<ffi.NativeFunction<Native_cfsetspeed>>('cfsetspeed');
  late final _dart_cfsetspeed _cfsetspeed =
      _cfsetspeed_ptr.asFunction<_dart_cfsetspeed>();

  int tcgetattr(
    int __fd,
    ffi.Pointer<termios> __termios_p,
  ) {
    return _tcgetattr(
      __fd,
      __termios_p,
    );
  }

  late final _tcgetattr_ptr =
      _lookup<ffi.NativeFunction<Native_tcgetattr>>('tcgetattr');
  late final _dart_tcgetattr _tcgetattr =
      _tcgetattr_ptr.asFunction<_dart_tcgetattr>();

  int tcsetattr(
    int __fd,
    int __optional_actions,
    ffi.Pointer<termios> __termios_p,
  ) {
    return _tcsetattr(
      __fd,
      __optional_actions,
      __termios_p,
    );
  }

  late final _tcsetattr_ptr =
      _lookup<ffi.NativeFunction<Native_tcsetattr>>('tcsetattr');
  late final _dart_tcsetattr _tcsetattr =
      _tcsetattr_ptr.asFunction<_dart_tcsetattr>();

  void cfmakeraw(
    ffi.Pointer<termios> __termios_p,
  ) {
    return _cfmakeraw(
      __termios_p,
    );
  }

  late final _cfmakeraw_ptr =
      _lookup<ffi.NativeFunction<Native_cfmakeraw>>('cfmakeraw');
  late final _dart_cfmakeraw _cfmakeraw =
      _cfmakeraw_ptr.asFunction<_dart_cfmakeraw>();

  int tcsendbreak(
    int __fd,
    int __duration,
  ) {
    return _tcsendbreak(
      __fd,
      __duration,
    );
  }

  late final _tcsendbreak_ptr =
      _lookup<ffi.NativeFunction<Native_tcsendbreak>>('tcsendbreak');
  late final _dart_tcsendbreak _tcsendbreak =
      _tcsendbreak_ptr.asFunction<_dart_tcsendbreak>();

  int tcdrain(
    int __fd,
  ) {
    return _tcdrain(
      __fd,
    );
  }

  late final _tcdrain_ptr =
      _lookup<ffi.NativeFunction<Native_tcdrain>>('tcdrain');
  late final _dart_tcdrain _tcdrain = _tcdrain_ptr.asFunction<_dart_tcdrain>();

  int tcflush(
    int __fd,
    int __queue_selector,
  ) {
    return _tcflush(
      __fd,
      __queue_selector,
    );
  }

  late final _tcflush_ptr =
      _lookup<ffi.NativeFunction<Native_tcflush>>('tcflush');
  late final _dart_tcflush _tcflush = _tcflush_ptr.asFunction<_dart_tcflush>();

  int tcflow(
    int __fd,
    int __action,
  ) {
    return _tcflow(
      __fd,
      __action,
    );
  }

  late final _tcflow_ptr = _lookup<ffi.NativeFunction<Native_tcflow>>('tcflow');
  late final _dart_tcflow _tcflow = _tcflow_ptr.asFunction<_dart_tcflow>();

  int tcgetsid(
    int __fd,
  ) {
    return _tcgetsid(
      __fd,
    );
  }

  late final _tcgetsid_ptr =
      _lookup<ffi.NativeFunction<Native_tcgetsid>>('tcgetsid');
  late final _dart_tcgetsid _tcgetsid =
      _tcgetsid_ptr.asFunction<_dart_tcgetsid>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LibCPlatformBackend _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<Native_ioctl>> get ioctl =>
      _library._ioctl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_create>> get epoll_create =>
      _library._epoll_create_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_create1>> get epoll_create1 =>
      _library._epoll_create1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_ctl>> get epoll_ctl =>
      _library._epoll_ctl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_wait>> get epoll_wait =>
      _library._epoll_wait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_errno_location>> get errno_location =>
      _library._errno_location_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_open>> get open => _library._open_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_close>> get close =>
      _library._close_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_read>> get read => _library._read_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcgetpgrp>> get tcgetpgrp =>
      _library._tcgetpgrp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcsetpgrp>> get tcsetpgrp =>
      _library._tcsetpgrp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cfgetospeed>> get cfgetospeed =>
      _library._cfgetospeed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cfgetispeed>> get cfgetispeed =>
      _library._cfgetispeed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cfsetospeed>> get cfsetospeed =>
      _library._cfsetospeed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cfsetispeed>> get cfsetispeed =>
      _library._cfsetispeed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cfsetspeed>> get cfsetspeed =>
      _library._cfsetspeed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcgetattr>> get tcgetattr =>
      _library._tcgetattr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcsetattr>> get tcsetattr =>
      _library._tcsetattr_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_cfmakeraw>> get cfmakeraw =>
      _library._cfmakeraw_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcsendbreak>> get tcsendbreak =>
      _library._tcsendbreak_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcdrain>> get tcdrain =>
      _library._tcdrain_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcflush>> get tcflush =>
      _library._tcflush_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcflow>> get tcflow =>
      _library._tcflow_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcgetsid>> get tcgetsid =>
      _library._tcgetsid_ptr;
}

abstract class EPOLL_EVENTS {
  static const int EPOLLIN = 1;
  static const int EPOLLPRI = 2;
  static const int EPOLLOUT = 4;
  static const int EPOLLRDNORM = 64;
  static const int EPOLLRDBAND = 128;
  static const int EPOLLWRNORM = 256;
  static const int EPOLLWRBAND = 512;
  static const int EPOLLMSG = 1024;
  static const int EPOLLERR = 8;
  static const int EPOLLHUP = 16;
  static const int EPOLLRDHUP = 8192;
  static const int EPOLLEXCLUSIVE = 268435456;
  static const int EPOLLWAKEUP = 536870912;
  static const int EPOLLONESHOT = 1073741824;
  static const int EPOLLET = -2147483648;
}

class epoll_event extends ffi.Opaque {}

class termios extends ffi.Struct {
  @ffi.Uint32()
  external int c_iflag;

  @ffi.Uint32()
  external int c_oflag;

  @ffi.Uint32()
  external int c_cflag;

  @ffi.Uint32()
  external int c_lflag;

  @ffi.Uint8()
  external int c_line;

  @ffi.Uint8()
  external int _unique_c_cc_item_0;
  @ffi.Uint8()
  external int _unique_c_cc_item_1;
  @ffi.Uint8()
  external int _unique_c_cc_item_2;
  @ffi.Uint8()
  external int _unique_c_cc_item_3;
  @ffi.Uint8()
  external int _unique_c_cc_item_4;
  @ffi.Uint8()
  external int _unique_c_cc_item_5;
  @ffi.Uint8()
  external int _unique_c_cc_item_6;
  @ffi.Uint8()
  external int _unique_c_cc_item_7;
  @ffi.Uint8()
  external int _unique_c_cc_item_8;
  @ffi.Uint8()
  external int _unique_c_cc_item_9;
  @ffi.Uint8()
  external int _unique_c_cc_item_10;
  @ffi.Uint8()
  external int _unique_c_cc_item_11;
  @ffi.Uint8()
  external int _unique_c_cc_item_12;
  @ffi.Uint8()
  external int _unique_c_cc_item_13;
  @ffi.Uint8()
  external int _unique_c_cc_item_14;
  @ffi.Uint8()
  external int _unique_c_cc_item_15;
  @ffi.Uint8()
  external int _unique_c_cc_item_16;
  @ffi.Uint8()
  external int _unique_c_cc_item_17;
  @ffi.Uint8()
  external int _unique_c_cc_item_18;
  @ffi.Uint8()
  external int _unique_c_cc_item_19;
  @ffi.Uint8()
  external int _unique_c_cc_item_20;
  @ffi.Uint8()
  external int _unique_c_cc_item_21;
  @ffi.Uint8()
  external int _unique_c_cc_item_22;
  @ffi.Uint8()
  external int _unique_c_cc_item_23;
  @ffi.Uint8()
  external int _unique_c_cc_item_24;
  @ffi.Uint8()
  external int _unique_c_cc_item_25;
  @ffi.Uint8()
  external int _unique_c_cc_item_26;
  @ffi.Uint8()
  external int _unique_c_cc_item_27;
  @ffi.Uint8()
  external int _unique_c_cc_item_28;
  @ffi.Uint8()
  external int _unique_c_cc_item_29;
  @ffi.Uint8()
  external int _unique_c_cc_item_30;
  @ffi.Uint8()
  external int _unique_c_cc_item_31;

  /// Helper for array `c_cc`.
  ArrayHelper_termios_c_cc_level0 get c_cc =>
      ArrayHelper_termios_c_cc_level0(this, [32], 0, 0);
  @ffi.Uint32()
  external int c_ispeed;

  @ffi.Uint32()
  external int c_ospeed;
}

/// Helper for array `c_cc` in struct `termios`.
class ArrayHelper_termios_c_cc_level0 {
  final termios _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_termios_c_cc_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_c_cc_item_0;
      case 1:
        return _struct._unique_c_cc_item_1;
      case 2:
        return _struct._unique_c_cc_item_2;
      case 3:
        return _struct._unique_c_cc_item_3;
      case 4:
        return _struct._unique_c_cc_item_4;
      case 5:
        return _struct._unique_c_cc_item_5;
      case 6:
        return _struct._unique_c_cc_item_6;
      case 7:
        return _struct._unique_c_cc_item_7;
      case 8:
        return _struct._unique_c_cc_item_8;
      case 9:
        return _struct._unique_c_cc_item_9;
      case 10:
        return _struct._unique_c_cc_item_10;
      case 11:
        return _struct._unique_c_cc_item_11;
      case 12:
        return _struct._unique_c_cc_item_12;
      case 13:
        return _struct._unique_c_cc_item_13;
      case 14:
        return _struct._unique_c_cc_item_14;
      case 15:
        return _struct._unique_c_cc_item_15;
      case 16:
        return _struct._unique_c_cc_item_16;
      case 17:
        return _struct._unique_c_cc_item_17;
      case 18:
        return _struct._unique_c_cc_item_18;
      case 19:
        return _struct._unique_c_cc_item_19;
      case 20:
        return _struct._unique_c_cc_item_20;
      case 21:
        return _struct._unique_c_cc_item_21;
      case 22:
        return _struct._unique_c_cc_item_22;
      case 23:
        return _struct._unique_c_cc_item_23;
      case 24:
        return _struct._unique_c_cc_item_24;
      case 25:
        return _struct._unique_c_cc_item_25;
      case 26:
        return _struct._unique_c_cc_item_26;
      case 27:
        return _struct._unique_c_cc_item_27;
      case 28:
        return _struct._unique_c_cc_item_28;
      case 29:
        return _struct._unique_c_cc_item_29;
      case 30:
        return _struct._unique_c_cc_item_30;
      case 31:
        return _struct._unique_c_cc_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_c_cc_item_0 = value;
        break;
      case 1:
        _struct._unique_c_cc_item_1 = value;
        break;
      case 2:
        _struct._unique_c_cc_item_2 = value;
        break;
      case 3:
        _struct._unique_c_cc_item_3 = value;
        break;
      case 4:
        _struct._unique_c_cc_item_4 = value;
        break;
      case 5:
        _struct._unique_c_cc_item_5 = value;
        break;
      case 6:
        _struct._unique_c_cc_item_6 = value;
        break;
      case 7:
        _struct._unique_c_cc_item_7 = value;
        break;
      case 8:
        _struct._unique_c_cc_item_8 = value;
        break;
      case 9:
        _struct._unique_c_cc_item_9 = value;
        break;
      case 10:
        _struct._unique_c_cc_item_10 = value;
        break;
      case 11:
        _struct._unique_c_cc_item_11 = value;
        break;
      case 12:
        _struct._unique_c_cc_item_12 = value;
        break;
      case 13:
        _struct._unique_c_cc_item_13 = value;
        break;
      case 14:
        _struct._unique_c_cc_item_14 = value;
        break;
      case 15:
        _struct._unique_c_cc_item_15 = value;
        break;
      case 16:
        _struct._unique_c_cc_item_16 = value;
        break;
      case 17:
        _struct._unique_c_cc_item_17 = value;
        break;
      case 18:
        _struct._unique_c_cc_item_18 = value;
        break;
      case 19:
        _struct._unique_c_cc_item_19 = value;
        break;
      case 20:
        _struct._unique_c_cc_item_20 = value;
        break;
      case 21:
        _struct._unique_c_cc_item_21 = value;
        break;
      case 22:
        _struct._unique_c_cc_item_22 = value;
        break;
      case 23:
        _struct._unique_c_cc_item_23 = value;
        break;
      case 24:
        _struct._unique_c_cc_item_24 = value;
        break;
      case 25:
        _struct._unique_c_cc_item_25 = value;
        break;
      case 26:
        _struct._unique_c_cc_item_26 = value;
        break;
      case 27:
        _struct._unique_c_cc_item_27 = value;
        break;
      case 28:
        _struct._unique_c_cc_item_28 = value;
        break;
      case 29:
        _struct._unique_c_cc_item_29 = value;
        break;
      case 30:
        _struct._unique_c_cc_item_30 = value;
        break;
      case 31:
        _struct._unique_c_cc_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiochip_info - Information about a certain GPIO chip
/// @name: the Linux kernel name of this GPIO chip
/// @label: a functional name for this GPIO chip, such as a product
/// number, may be empty (i.e. label[0] == '\0')
/// @lines: number of GPIO lines on this chip
class gpiochip_info extends ffi.Struct {
  @ffi.Int8()
  external int _unique_name_item_0;
  @ffi.Int8()
  external int _unique_name_item_1;
  @ffi.Int8()
  external int _unique_name_item_2;
  @ffi.Int8()
  external int _unique_name_item_3;
  @ffi.Int8()
  external int _unique_name_item_4;
  @ffi.Int8()
  external int _unique_name_item_5;
  @ffi.Int8()
  external int _unique_name_item_6;
  @ffi.Int8()
  external int _unique_name_item_7;
  @ffi.Int8()
  external int _unique_name_item_8;
  @ffi.Int8()
  external int _unique_name_item_9;
  @ffi.Int8()
  external int _unique_name_item_10;
  @ffi.Int8()
  external int _unique_name_item_11;
  @ffi.Int8()
  external int _unique_name_item_12;
  @ffi.Int8()
  external int _unique_name_item_13;
  @ffi.Int8()
  external int _unique_name_item_14;
  @ffi.Int8()
  external int _unique_name_item_15;
  @ffi.Int8()
  external int _unique_name_item_16;
  @ffi.Int8()
  external int _unique_name_item_17;
  @ffi.Int8()
  external int _unique_name_item_18;
  @ffi.Int8()
  external int _unique_name_item_19;
  @ffi.Int8()
  external int _unique_name_item_20;
  @ffi.Int8()
  external int _unique_name_item_21;
  @ffi.Int8()
  external int _unique_name_item_22;
  @ffi.Int8()
  external int _unique_name_item_23;
  @ffi.Int8()
  external int _unique_name_item_24;
  @ffi.Int8()
  external int _unique_name_item_25;
  @ffi.Int8()
  external int _unique_name_item_26;
  @ffi.Int8()
  external int _unique_name_item_27;
  @ffi.Int8()
  external int _unique_name_item_28;
  @ffi.Int8()
  external int _unique_name_item_29;
  @ffi.Int8()
  external int _unique_name_item_30;
  @ffi.Int8()
  external int _unique_name_item_31;

  /// Helper for array `name`.
  ArrayHelper_gpiochip_info_name_level0 get name =>
      ArrayHelper_gpiochip_info_name_level0(this, [32], 0, 0);
  @ffi.Int8()
  external int _unique_label_item_0;
  @ffi.Int8()
  external int _unique_label_item_1;
  @ffi.Int8()
  external int _unique_label_item_2;
  @ffi.Int8()
  external int _unique_label_item_3;
  @ffi.Int8()
  external int _unique_label_item_4;
  @ffi.Int8()
  external int _unique_label_item_5;
  @ffi.Int8()
  external int _unique_label_item_6;
  @ffi.Int8()
  external int _unique_label_item_7;
  @ffi.Int8()
  external int _unique_label_item_8;
  @ffi.Int8()
  external int _unique_label_item_9;
  @ffi.Int8()
  external int _unique_label_item_10;
  @ffi.Int8()
  external int _unique_label_item_11;
  @ffi.Int8()
  external int _unique_label_item_12;
  @ffi.Int8()
  external int _unique_label_item_13;
  @ffi.Int8()
  external int _unique_label_item_14;
  @ffi.Int8()
  external int _unique_label_item_15;
  @ffi.Int8()
  external int _unique_label_item_16;
  @ffi.Int8()
  external int _unique_label_item_17;
  @ffi.Int8()
  external int _unique_label_item_18;
  @ffi.Int8()
  external int _unique_label_item_19;
  @ffi.Int8()
  external int _unique_label_item_20;
  @ffi.Int8()
  external int _unique_label_item_21;
  @ffi.Int8()
  external int _unique_label_item_22;
  @ffi.Int8()
  external int _unique_label_item_23;
  @ffi.Int8()
  external int _unique_label_item_24;
  @ffi.Int8()
  external int _unique_label_item_25;
  @ffi.Int8()
  external int _unique_label_item_26;
  @ffi.Int8()
  external int _unique_label_item_27;
  @ffi.Int8()
  external int _unique_label_item_28;
  @ffi.Int8()
  external int _unique_label_item_29;
  @ffi.Int8()
  external int _unique_label_item_30;
  @ffi.Int8()
  external int _unique_label_item_31;

  /// Helper for array `label`.
  ArrayHelper_gpiochip_info_label_level0 get label =>
      ArrayHelper_gpiochip_info_label_level0(this, [32], 0, 0);
  @ffi.Uint32()
  external int lines;
}

/// Helper for array `name` in struct `gpiochip_info`.
class ArrayHelper_gpiochip_info_name_level0 {
  final gpiochip_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiochip_info_name_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_name_item_0;
      case 1:
        return _struct._unique_name_item_1;
      case 2:
        return _struct._unique_name_item_2;
      case 3:
        return _struct._unique_name_item_3;
      case 4:
        return _struct._unique_name_item_4;
      case 5:
        return _struct._unique_name_item_5;
      case 6:
        return _struct._unique_name_item_6;
      case 7:
        return _struct._unique_name_item_7;
      case 8:
        return _struct._unique_name_item_8;
      case 9:
        return _struct._unique_name_item_9;
      case 10:
        return _struct._unique_name_item_10;
      case 11:
        return _struct._unique_name_item_11;
      case 12:
        return _struct._unique_name_item_12;
      case 13:
        return _struct._unique_name_item_13;
      case 14:
        return _struct._unique_name_item_14;
      case 15:
        return _struct._unique_name_item_15;
      case 16:
        return _struct._unique_name_item_16;
      case 17:
        return _struct._unique_name_item_17;
      case 18:
        return _struct._unique_name_item_18;
      case 19:
        return _struct._unique_name_item_19;
      case 20:
        return _struct._unique_name_item_20;
      case 21:
        return _struct._unique_name_item_21;
      case 22:
        return _struct._unique_name_item_22;
      case 23:
        return _struct._unique_name_item_23;
      case 24:
        return _struct._unique_name_item_24;
      case 25:
        return _struct._unique_name_item_25;
      case 26:
        return _struct._unique_name_item_26;
      case 27:
        return _struct._unique_name_item_27;
      case 28:
        return _struct._unique_name_item_28;
      case 29:
        return _struct._unique_name_item_29;
      case 30:
        return _struct._unique_name_item_30;
      case 31:
        return _struct._unique_name_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_name_item_0 = value;
        break;
      case 1:
        _struct._unique_name_item_1 = value;
        break;
      case 2:
        _struct._unique_name_item_2 = value;
        break;
      case 3:
        _struct._unique_name_item_3 = value;
        break;
      case 4:
        _struct._unique_name_item_4 = value;
        break;
      case 5:
        _struct._unique_name_item_5 = value;
        break;
      case 6:
        _struct._unique_name_item_6 = value;
        break;
      case 7:
        _struct._unique_name_item_7 = value;
        break;
      case 8:
        _struct._unique_name_item_8 = value;
        break;
      case 9:
        _struct._unique_name_item_9 = value;
        break;
      case 10:
        _struct._unique_name_item_10 = value;
        break;
      case 11:
        _struct._unique_name_item_11 = value;
        break;
      case 12:
        _struct._unique_name_item_12 = value;
        break;
      case 13:
        _struct._unique_name_item_13 = value;
        break;
      case 14:
        _struct._unique_name_item_14 = value;
        break;
      case 15:
        _struct._unique_name_item_15 = value;
        break;
      case 16:
        _struct._unique_name_item_16 = value;
        break;
      case 17:
        _struct._unique_name_item_17 = value;
        break;
      case 18:
        _struct._unique_name_item_18 = value;
        break;
      case 19:
        _struct._unique_name_item_19 = value;
        break;
      case 20:
        _struct._unique_name_item_20 = value;
        break;
      case 21:
        _struct._unique_name_item_21 = value;
        break;
      case 22:
        _struct._unique_name_item_22 = value;
        break;
      case 23:
        _struct._unique_name_item_23 = value;
        break;
      case 24:
        _struct._unique_name_item_24 = value;
        break;
      case 25:
        _struct._unique_name_item_25 = value;
        break;
      case 26:
        _struct._unique_name_item_26 = value;
        break;
      case 27:
        _struct._unique_name_item_27 = value;
        break;
      case 28:
        _struct._unique_name_item_28 = value;
        break;
      case 29:
        _struct._unique_name_item_29 = value;
        break;
      case 30:
        _struct._unique_name_item_30 = value;
        break;
      case 31:
        _struct._unique_name_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `label` in struct `gpiochip_info`.
class ArrayHelper_gpiochip_info_label_level0 {
  final gpiochip_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiochip_info_label_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_label_item_0;
      case 1:
        return _struct._unique_label_item_1;
      case 2:
        return _struct._unique_label_item_2;
      case 3:
        return _struct._unique_label_item_3;
      case 4:
        return _struct._unique_label_item_4;
      case 5:
        return _struct._unique_label_item_5;
      case 6:
        return _struct._unique_label_item_6;
      case 7:
        return _struct._unique_label_item_7;
      case 8:
        return _struct._unique_label_item_8;
      case 9:
        return _struct._unique_label_item_9;
      case 10:
        return _struct._unique_label_item_10;
      case 11:
        return _struct._unique_label_item_11;
      case 12:
        return _struct._unique_label_item_12;
      case 13:
        return _struct._unique_label_item_13;
      case 14:
        return _struct._unique_label_item_14;
      case 15:
        return _struct._unique_label_item_15;
      case 16:
        return _struct._unique_label_item_16;
      case 17:
        return _struct._unique_label_item_17;
      case 18:
        return _struct._unique_label_item_18;
      case 19:
        return _struct._unique_label_item_19;
      case 20:
        return _struct._unique_label_item_20;
      case 21:
        return _struct._unique_label_item_21;
      case 22:
        return _struct._unique_label_item_22;
      case 23:
        return _struct._unique_label_item_23;
      case 24:
        return _struct._unique_label_item_24;
      case 25:
        return _struct._unique_label_item_25;
      case 26:
        return _struct._unique_label_item_26;
      case 27:
        return _struct._unique_label_item_27;
      case 28:
        return _struct._unique_label_item_28;
      case 29:
        return _struct._unique_label_item_29;
      case 30:
        return _struct._unique_label_item_30;
      case 31:
        return _struct._unique_label_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_label_item_0 = value;
        break;
      case 1:
        _struct._unique_label_item_1 = value;
        break;
      case 2:
        _struct._unique_label_item_2 = value;
        break;
      case 3:
        _struct._unique_label_item_3 = value;
        break;
      case 4:
        _struct._unique_label_item_4 = value;
        break;
      case 5:
        _struct._unique_label_item_5 = value;
        break;
      case 6:
        _struct._unique_label_item_6 = value;
        break;
      case 7:
        _struct._unique_label_item_7 = value;
        break;
      case 8:
        _struct._unique_label_item_8 = value;
        break;
      case 9:
        _struct._unique_label_item_9 = value;
        break;
      case 10:
        _struct._unique_label_item_10 = value;
        break;
      case 11:
        _struct._unique_label_item_11 = value;
        break;
      case 12:
        _struct._unique_label_item_12 = value;
        break;
      case 13:
        _struct._unique_label_item_13 = value;
        break;
      case 14:
        _struct._unique_label_item_14 = value;
        break;
      case 15:
        _struct._unique_label_item_15 = value;
        break;
      case 16:
        _struct._unique_label_item_16 = value;
        break;
      case 17:
        _struct._unique_label_item_17 = value;
        break;
      case 18:
        _struct._unique_label_item_18 = value;
        break;
      case 19:
        _struct._unique_label_item_19 = value;
        break;
      case 20:
        _struct._unique_label_item_20 = value;
        break;
      case 21:
        _struct._unique_label_item_21 = value;
        break;
      case 22:
        _struct._unique_label_item_22 = value;
        break;
      case 23:
        _struct._unique_label_item_23 = value;
        break;
      case 24:
        _struct._unique_label_item_24 = value;
        break;
      case 25:
        _struct._unique_label_item_25 = value;
        break;
      case 26:
        _struct._unique_label_item_26 = value;
        break;
      case 27:
        _struct._unique_label_item_27 = value;
        break;
      case 28:
        _struct._unique_label_item_28 = value;
        break;
      case 29:
        _struct._unique_label_item_29 = value;
        break;
      case 30:
        _struct._unique_label_item_30 = value;
        break;
      case 31:
        _struct._unique_label_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpio_v2_line_values - Values of GPIO lines
/// @bits: a bitmap containing the value of the lines, set to 1 for active
/// and 0 for inactive.
/// @mask: a bitmap identifying the lines to get or set, with each bit
/// number corresponding to the index into &struct
/// gpio_v2_line_request.offsets.
class gpio_v2_line_values extends ffi.Struct {
  @ffi.Uint64()
  external int bits;

  @ffi.Uint64()
  external int mask;
}

/// struct gpio_v2_line_attribute - a configurable attribute of a line
/// @id: attribute identifier with value from &enum gpio_v2_line_attr_id
/// @padding: reserved for future use and must be zero filled
/// @flags: if id is %GPIO_V2_LINE_ATTR_ID_FLAGS, the flags for the GPIO
/// line, with values from &enum gpio_v2_line_flag, such as
/// %GPIO_V2_LINE_FLAG_ACTIVE_LOW, %GPIO_V2_LINE_FLAG_OUTPUT etc, added
/// together.  This overrides the default flags contained in the &struct
/// gpio_v2_line_config for the associated line.
/// @values: if id is %GPIO_V2_LINE_ATTR_ID_OUTPUT_VALUES, a bitmap
/// containing the values to which the lines will be set, with each bit
/// number corresponding to the index into &struct
/// gpio_v2_line_request.offsets.
/// @debounce_period_us: if id is %GPIO_V2_LINE_ATTR_ID_DEBOUNCE, the
/// desired debounce period, in microseconds
class gpio_v2_line_attribute extends ffi.Struct {
  @ffi.Uint32()
  external int id;

  @ffi.Uint32()
  external int padding;
}

/// struct gpio_v2_line_config_attribute - a configuration attribute
/// associated with one or more of the requested lines.
/// @attr: the configurable attribute
/// @mask: a bitmap identifying the lines to which the attribute applies,
/// with each bit number corresponding to the index into &struct
/// gpio_v2_line_request.offsets.
class gpio_v2_line_config_attribute extends ffi.Struct {
  external gpio_v2_line_attribute attr;

  @ffi.Uint64()
  external int mask;
}

/// struct gpio_v2_line_config - Configuration for GPIO lines
/// @flags: flags for the GPIO lines, with values from &enum
/// gpio_v2_line_flag, such as %GPIO_V2_LINE_FLAG_ACTIVE_LOW,
/// %GPIO_V2_LINE_FLAG_OUTPUT etc, added together.  This is the default for
/// all requested lines but may be overridden for particular lines using
/// @attrs.
/// @num_attrs: the number of attributes in @attrs
/// @padding: reserved for future use and must be zero filled
/// @attrs: the configuration attributes associated with the requested
/// lines.  Any attribute should only be associated with a particular line
/// once.  If an attribute is associated with a line multiple times then the
/// first occurrence (i.e. lowest index) has precedence.
class gpio_v2_line_config extends ffi.Struct {
  @ffi.Uint64()
  external int flags;

  @ffi.Uint32()
  external int num_attrs;

  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;
  @ffi.Uint32()
  external int _unique_padding_item_4;

  /// Helper for array `padding`.
  ArrayHelper_gpio_v2_line_config_padding_level0 get padding =>
      ArrayHelper_gpio_v2_line_config_padding_level0(this, [5], 0, 0);
  external gpio_v2_line_config_attribute _unique_attrs_item_0;
  external gpio_v2_line_config_attribute _unique_attrs_item_1;
  external gpio_v2_line_config_attribute _unique_attrs_item_2;
  external gpio_v2_line_config_attribute _unique_attrs_item_3;
  external gpio_v2_line_config_attribute _unique_attrs_item_4;
  external gpio_v2_line_config_attribute _unique_attrs_item_5;
  external gpio_v2_line_config_attribute _unique_attrs_item_6;
  external gpio_v2_line_config_attribute _unique_attrs_item_7;
  external gpio_v2_line_config_attribute _unique_attrs_item_8;
  external gpio_v2_line_config_attribute _unique_attrs_item_9;

  /// Helper for array `attrs`.
  ArrayHelper_gpio_v2_line_config_attrs_level0 get attrs =>
      ArrayHelper_gpio_v2_line_config_attrs_level0(this, [10], 0, 0);
}

/// Helper for array `padding` in struct `gpio_v2_line_config`.
class ArrayHelper_gpio_v2_line_config_padding_level0 {
  final gpio_v2_line_config _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_config_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      case 4:
        return _struct._unique_padding_item_4;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      case 4:
        _struct._unique_padding_item_4 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `attrs` in struct `gpio_v2_line_config`.
class ArrayHelper_gpio_v2_line_config_attrs_level0 {
  final gpio_v2_line_config _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_config_attrs_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  gpio_v2_line_config_attribute operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_attrs_item_0;
      case 1:
        return _struct._unique_attrs_item_1;
      case 2:
        return _struct._unique_attrs_item_2;
      case 3:
        return _struct._unique_attrs_item_3;
      case 4:
        return _struct._unique_attrs_item_4;
      case 5:
        return _struct._unique_attrs_item_5;
      case 6:
        return _struct._unique_attrs_item_6;
      case 7:
        return _struct._unique_attrs_item_7;
      case 8:
        return _struct._unique_attrs_item_8;
      case 9:
        return _struct._unique_attrs_item_9;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, gpio_v2_line_config_attribute value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_attrs_item_0 = value;
        break;
      case 1:
        _struct._unique_attrs_item_1 = value;
        break;
      case 2:
        _struct._unique_attrs_item_2 = value;
        break;
      case 3:
        _struct._unique_attrs_item_3 = value;
        break;
      case 4:
        _struct._unique_attrs_item_4 = value;
        break;
      case 5:
        _struct._unique_attrs_item_5 = value;
        break;
      case 6:
        _struct._unique_attrs_item_6 = value;
        break;
      case 7:
        _struct._unique_attrs_item_7 = value;
        break;
      case 8:
        _struct._unique_attrs_item_8 = value;
        break;
      case 9:
        _struct._unique_attrs_item_9 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpio_v2_line_request - Information about a request for GPIO lines
/// @offsets: an array of desired lines, specified by offset index for the
/// associated GPIO chip
/// @consumer: a desired consumer label for the selected GPIO lines such as
/// "my-bitbanged-relay"
/// @config: requested configuration for the lines.
/// @num_lines: number of lines requested in this request, i.e. the number
/// of valid fields in the %GPIO_V2_LINES_MAX sized arrays, set to 1 to
/// request a single line
/// @event_buffer_size: a suggested minimum number of line events that the
/// kernel should buffer.  This is only relevant if edge detection is
/// enabled in the configuration. Note that this is only a suggested value
/// and the kernel may allocate a larger buffer or cap the size of the
/// buffer. If this field is zero then the buffer size defaults to a minimum
/// of @num_lines * 16.
/// @padding: reserved for future use and must be zero filled
/// @fd: if successful this field will contain a valid anonymous file handle
/// after a %GPIO_GET_LINE_IOCTL operation, zero or negative value means
/// error
class gpio_v2_line_request extends ffi.Struct {
  @ffi.Uint32()
  external int _unique_offsets_item_0;
  @ffi.Uint32()
  external int _unique_offsets_item_1;
  @ffi.Uint32()
  external int _unique_offsets_item_2;
  @ffi.Uint32()
  external int _unique_offsets_item_3;
  @ffi.Uint32()
  external int _unique_offsets_item_4;
  @ffi.Uint32()
  external int _unique_offsets_item_5;
  @ffi.Uint32()
  external int _unique_offsets_item_6;
  @ffi.Uint32()
  external int _unique_offsets_item_7;
  @ffi.Uint32()
  external int _unique_offsets_item_8;
  @ffi.Uint32()
  external int _unique_offsets_item_9;
  @ffi.Uint32()
  external int _unique_offsets_item_10;
  @ffi.Uint32()
  external int _unique_offsets_item_11;
  @ffi.Uint32()
  external int _unique_offsets_item_12;
  @ffi.Uint32()
  external int _unique_offsets_item_13;
  @ffi.Uint32()
  external int _unique_offsets_item_14;
  @ffi.Uint32()
  external int _unique_offsets_item_15;
  @ffi.Uint32()
  external int _unique_offsets_item_16;
  @ffi.Uint32()
  external int _unique_offsets_item_17;
  @ffi.Uint32()
  external int _unique_offsets_item_18;
  @ffi.Uint32()
  external int _unique_offsets_item_19;
  @ffi.Uint32()
  external int _unique_offsets_item_20;
  @ffi.Uint32()
  external int _unique_offsets_item_21;
  @ffi.Uint32()
  external int _unique_offsets_item_22;
  @ffi.Uint32()
  external int _unique_offsets_item_23;
  @ffi.Uint32()
  external int _unique_offsets_item_24;
  @ffi.Uint32()
  external int _unique_offsets_item_25;
  @ffi.Uint32()
  external int _unique_offsets_item_26;
  @ffi.Uint32()
  external int _unique_offsets_item_27;
  @ffi.Uint32()
  external int _unique_offsets_item_28;
  @ffi.Uint32()
  external int _unique_offsets_item_29;
  @ffi.Uint32()
  external int _unique_offsets_item_30;
  @ffi.Uint32()
  external int _unique_offsets_item_31;
  @ffi.Uint32()
  external int _unique_offsets_item_32;
  @ffi.Uint32()
  external int _unique_offsets_item_33;
  @ffi.Uint32()
  external int _unique_offsets_item_34;
  @ffi.Uint32()
  external int _unique_offsets_item_35;
  @ffi.Uint32()
  external int _unique_offsets_item_36;
  @ffi.Uint32()
  external int _unique_offsets_item_37;
  @ffi.Uint32()
  external int _unique_offsets_item_38;
  @ffi.Uint32()
  external int _unique_offsets_item_39;
  @ffi.Uint32()
  external int _unique_offsets_item_40;
  @ffi.Uint32()
  external int _unique_offsets_item_41;
  @ffi.Uint32()
  external int _unique_offsets_item_42;
  @ffi.Uint32()
  external int _unique_offsets_item_43;
  @ffi.Uint32()
  external int _unique_offsets_item_44;
  @ffi.Uint32()
  external int _unique_offsets_item_45;
  @ffi.Uint32()
  external int _unique_offsets_item_46;
  @ffi.Uint32()
  external int _unique_offsets_item_47;
  @ffi.Uint32()
  external int _unique_offsets_item_48;
  @ffi.Uint32()
  external int _unique_offsets_item_49;
  @ffi.Uint32()
  external int _unique_offsets_item_50;
  @ffi.Uint32()
  external int _unique_offsets_item_51;
  @ffi.Uint32()
  external int _unique_offsets_item_52;
  @ffi.Uint32()
  external int _unique_offsets_item_53;
  @ffi.Uint32()
  external int _unique_offsets_item_54;
  @ffi.Uint32()
  external int _unique_offsets_item_55;
  @ffi.Uint32()
  external int _unique_offsets_item_56;
  @ffi.Uint32()
  external int _unique_offsets_item_57;
  @ffi.Uint32()
  external int _unique_offsets_item_58;
  @ffi.Uint32()
  external int _unique_offsets_item_59;
  @ffi.Uint32()
  external int _unique_offsets_item_60;
  @ffi.Uint32()
  external int _unique_offsets_item_61;
  @ffi.Uint32()
  external int _unique_offsets_item_62;
  @ffi.Uint32()
  external int _unique_offsets_item_63;

  /// Helper for array `offsets`.
  ArrayHelper_gpio_v2_line_request_offsets_level0 get offsets =>
      ArrayHelper_gpio_v2_line_request_offsets_level0(this, [64], 0, 0);
  @ffi.Int8()
  external int _unique_consumer_item_0;
  @ffi.Int8()
  external int _unique_consumer_item_1;
  @ffi.Int8()
  external int _unique_consumer_item_2;
  @ffi.Int8()
  external int _unique_consumer_item_3;
  @ffi.Int8()
  external int _unique_consumer_item_4;
  @ffi.Int8()
  external int _unique_consumer_item_5;
  @ffi.Int8()
  external int _unique_consumer_item_6;
  @ffi.Int8()
  external int _unique_consumer_item_7;
  @ffi.Int8()
  external int _unique_consumer_item_8;
  @ffi.Int8()
  external int _unique_consumer_item_9;
  @ffi.Int8()
  external int _unique_consumer_item_10;
  @ffi.Int8()
  external int _unique_consumer_item_11;
  @ffi.Int8()
  external int _unique_consumer_item_12;
  @ffi.Int8()
  external int _unique_consumer_item_13;
  @ffi.Int8()
  external int _unique_consumer_item_14;
  @ffi.Int8()
  external int _unique_consumer_item_15;
  @ffi.Int8()
  external int _unique_consumer_item_16;
  @ffi.Int8()
  external int _unique_consumer_item_17;
  @ffi.Int8()
  external int _unique_consumer_item_18;
  @ffi.Int8()
  external int _unique_consumer_item_19;
  @ffi.Int8()
  external int _unique_consumer_item_20;
  @ffi.Int8()
  external int _unique_consumer_item_21;
  @ffi.Int8()
  external int _unique_consumer_item_22;
  @ffi.Int8()
  external int _unique_consumer_item_23;
  @ffi.Int8()
  external int _unique_consumer_item_24;
  @ffi.Int8()
  external int _unique_consumer_item_25;
  @ffi.Int8()
  external int _unique_consumer_item_26;
  @ffi.Int8()
  external int _unique_consumer_item_27;
  @ffi.Int8()
  external int _unique_consumer_item_28;
  @ffi.Int8()
  external int _unique_consumer_item_29;
  @ffi.Int8()
  external int _unique_consumer_item_30;
  @ffi.Int8()
  external int _unique_consumer_item_31;

  /// Helper for array `consumer`.
  ArrayHelper_gpio_v2_line_request_consumer_level0 get consumer =>
      ArrayHelper_gpio_v2_line_request_consumer_level0(this, [32], 0, 0);
  external gpio_v2_line_config config;

  @ffi.Uint32()
  external int num_lines;

  @ffi.Uint32()
  external int event_buffer_size;

  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;
  @ffi.Uint32()
  external int _unique_padding_item_4;

  /// Helper for array `padding`.
  ArrayHelper_gpio_v2_line_request_padding_level0 get padding =>
      ArrayHelper_gpio_v2_line_request_padding_level0(this, [5], 0, 0);
  @ffi.Int32()
  external int fd;
}

/// Helper for array `offsets` in struct `gpio_v2_line_request`.
class ArrayHelper_gpio_v2_line_request_offsets_level0 {
  final gpio_v2_line_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_request_offsets_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_offsets_item_0;
      case 1:
        return _struct._unique_offsets_item_1;
      case 2:
        return _struct._unique_offsets_item_2;
      case 3:
        return _struct._unique_offsets_item_3;
      case 4:
        return _struct._unique_offsets_item_4;
      case 5:
        return _struct._unique_offsets_item_5;
      case 6:
        return _struct._unique_offsets_item_6;
      case 7:
        return _struct._unique_offsets_item_7;
      case 8:
        return _struct._unique_offsets_item_8;
      case 9:
        return _struct._unique_offsets_item_9;
      case 10:
        return _struct._unique_offsets_item_10;
      case 11:
        return _struct._unique_offsets_item_11;
      case 12:
        return _struct._unique_offsets_item_12;
      case 13:
        return _struct._unique_offsets_item_13;
      case 14:
        return _struct._unique_offsets_item_14;
      case 15:
        return _struct._unique_offsets_item_15;
      case 16:
        return _struct._unique_offsets_item_16;
      case 17:
        return _struct._unique_offsets_item_17;
      case 18:
        return _struct._unique_offsets_item_18;
      case 19:
        return _struct._unique_offsets_item_19;
      case 20:
        return _struct._unique_offsets_item_20;
      case 21:
        return _struct._unique_offsets_item_21;
      case 22:
        return _struct._unique_offsets_item_22;
      case 23:
        return _struct._unique_offsets_item_23;
      case 24:
        return _struct._unique_offsets_item_24;
      case 25:
        return _struct._unique_offsets_item_25;
      case 26:
        return _struct._unique_offsets_item_26;
      case 27:
        return _struct._unique_offsets_item_27;
      case 28:
        return _struct._unique_offsets_item_28;
      case 29:
        return _struct._unique_offsets_item_29;
      case 30:
        return _struct._unique_offsets_item_30;
      case 31:
        return _struct._unique_offsets_item_31;
      case 32:
        return _struct._unique_offsets_item_32;
      case 33:
        return _struct._unique_offsets_item_33;
      case 34:
        return _struct._unique_offsets_item_34;
      case 35:
        return _struct._unique_offsets_item_35;
      case 36:
        return _struct._unique_offsets_item_36;
      case 37:
        return _struct._unique_offsets_item_37;
      case 38:
        return _struct._unique_offsets_item_38;
      case 39:
        return _struct._unique_offsets_item_39;
      case 40:
        return _struct._unique_offsets_item_40;
      case 41:
        return _struct._unique_offsets_item_41;
      case 42:
        return _struct._unique_offsets_item_42;
      case 43:
        return _struct._unique_offsets_item_43;
      case 44:
        return _struct._unique_offsets_item_44;
      case 45:
        return _struct._unique_offsets_item_45;
      case 46:
        return _struct._unique_offsets_item_46;
      case 47:
        return _struct._unique_offsets_item_47;
      case 48:
        return _struct._unique_offsets_item_48;
      case 49:
        return _struct._unique_offsets_item_49;
      case 50:
        return _struct._unique_offsets_item_50;
      case 51:
        return _struct._unique_offsets_item_51;
      case 52:
        return _struct._unique_offsets_item_52;
      case 53:
        return _struct._unique_offsets_item_53;
      case 54:
        return _struct._unique_offsets_item_54;
      case 55:
        return _struct._unique_offsets_item_55;
      case 56:
        return _struct._unique_offsets_item_56;
      case 57:
        return _struct._unique_offsets_item_57;
      case 58:
        return _struct._unique_offsets_item_58;
      case 59:
        return _struct._unique_offsets_item_59;
      case 60:
        return _struct._unique_offsets_item_60;
      case 61:
        return _struct._unique_offsets_item_61;
      case 62:
        return _struct._unique_offsets_item_62;
      case 63:
        return _struct._unique_offsets_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_offsets_item_0 = value;
        break;
      case 1:
        _struct._unique_offsets_item_1 = value;
        break;
      case 2:
        _struct._unique_offsets_item_2 = value;
        break;
      case 3:
        _struct._unique_offsets_item_3 = value;
        break;
      case 4:
        _struct._unique_offsets_item_4 = value;
        break;
      case 5:
        _struct._unique_offsets_item_5 = value;
        break;
      case 6:
        _struct._unique_offsets_item_6 = value;
        break;
      case 7:
        _struct._unique_offsets_item_7 = value;
        break;
      case 8:
        _struct._unique_offsets_item_8 = value;
        break;
      case 9:
        _struct._unique_offsets_item_9 = value;
        break;
      case 10:
        _struct._unique_offsets_item_10 = value;
        break;
      case 11:
        _struct._unique_offsets_item_11 = value;
        break;
      case 12:
        _struct._unique_offsets_item_12 = value;
        break;
      case 13:
        _struct._unique_offsets_item_13 = value;
        break;
      case 14:
        _struct._unique_offsets_item_14 = value;
        break;
      case 15:
        _struct._unique_offsets_item_15 = value;
        break;
      case 16:
        _struct._unique_offsets_item_16 = value;
        break;
      case 17:
        _struct._unique_offsets_item_17 = value;
        break;
      case 18:
        _struct._unique_offsets_item_18 = value;
        break;
      case 19:
        _struct._unique_offsets_item_19 = value;
        break;
      case 20:
        _struct._unique_offsets_item_20 = value;
        break;
      case 21:
        _struct._unique_offsets_item_21 = value;
        break;
      case 22:
        _struct._unique_offsets_item_22 = value;
        break;
      case 23:
        _struct._unique_offsets_item_23 = value;
        break;
      case 24:
        _struct._unique_offsets_item_24 = value;
        break;
      case 25:
        _struct._unique_offsets_item_25 = value;
        break;
      case 26:
        _struct._unique_offsets_item_26 = value;
        break;
      case 27:
        _struct._unique_offsets_item_27 = value;
        break;
      case 28:
        _struct._unique_offsets_item_28 = value;
        break;
      case 29:
        _struct._unique_offsets_item_29 = value;
        break;
      case 30:
        _struct._unique_offsets_item_30 = value;
        break;
      case 31:
        _struct._unique_offsets_item_31 = value;
        break;
      case 32:
        _struct._unique_offsets_item_32 = value;
        break;
      case 33:
        _struct._unique_offsets_item_33 = value;
        break;
      case 34:
        _struct._unique_offsets_item_34 = value;
        break;
      case 35:
        _struct._unique_offsets_item_35 = value;
        break;
      case 36:
        _struct._unique_offsets_item_36 = value;
        break;
      case 37:
        _struct._unique_offsets_item_37 = value;
        break;
      case 38:
        _struct._unique_offsets_item_38 = value;
        break;
      case 39:
        _struct._unique_offsets_item_39 = value;
        break;
      case 40:
        _struct._unique_offsets_item_40 = value;
        break;
      case 41:
        _struct._unique_offsets_item_41 = value;
        break;
      case 42:
        _struct._unique_offsets_item_42 = value;
        break;
      case 43:
        _struct._unique_offsets_item_43 = value;
        break;
      case 44:
        _struct._unique_offsets_item_44 = value;
        break;
      case 45:
        _struct._unique_offsets_item_45 = value;
        break;
      case 46:
        _struct._unique_offsets_item_46 = value;
        break;
      case 47:
        _struct._unique_offsets_item_47 = value;
        break;
      case 48:
        _struct._unique_offsets_item_48 = value;
        break;
      case 49:
        _struct._unique_offsets_item_49 = value;
        break;
      case 50:
        _struct._unique_offsets_item_50 = value;
        break;
      case 51:
        _struct._unique_offsets_item_51 = value;
        break;
      case 52:
        _struct._unique_offsets_item_52 = value;
        break;
      case 53:
        _struct._unique_offsets_item_53 = value;
        break;
      case 54:
        _struct._unique_offsets_item_54 = value;
        break;
      case 55:
        _struct._unique_offsets_item_55 = value;
        break;
      case 56:
        _struct._unique_offsets_item_56 = value;
        break;
      case 57:
        _struct._unique_offsets_item_57 = value;
        break;
      case 58:
        _struct._unique_offsets_item_58 = value;
        break;
      case 59:
        _struct._unique_offsets_item_59 = value;
        break;
      case 60:
        _struct._unique_offsets_item_60 = value;
        break;
      case 61:
        _struct._unique_offsets_item_61 = value;
        break;
      case 62:
        _struct._unique_offsets_item_62 = value;
        break;
      case 63:
        _struct._unique_offsets_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `consumer` in struct `gpio_v2_line_request`.
class ArrayHelper_gpio_v2_line_request_consumer_level0 {
  final gpio_v2_line_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_request_consumer_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_item_0;
      case 1:
        return _struct._unique_consumer_item_1;
      case 2:
        return _struct._unique_consumer_item_2;
      case 3:
        return _struct._unique_consumer_item_3;
      case 4:
        return _struct._unique_consumer_item_4;
      case 5:
        return _struct._unique_consumer_item_5;
      case 6:
        return _struct._unique_consumer_item_6;
      case 7:
        return _struct._unique_consumer_item_7;
      case 8:
        return _struct._unique_consumer_item_8;
      case 9:
        return _struct._unique_consumer_item_9;
      case 10:
        return _struct._unique_consumer_item_10;
      case 11:
        return _struct._unique_consumer_item_11;
      case 12:
        return _struct._unique_consumer_item_12;
      case 13:
        return _struct._unique_consumer_item_13;
      case 14:
        return _struct._unique_consumer_item_14;
      case 15:
        return _struct._unique_consumer_item_15;
      case 16:
        return _struct._unique_consumer_item_16;
      case 17:
        return _struct._unique_consumer_item_17;
      case 18:
        return _struct._unique_consumer_item_18;
      case 19:
        return _struct._unique_consumer_item_19;
      case 20:
        return _struct._unique_consumer_item_20;
      case 21:
        return _struct._unique_consumer_item_21;
      case 22:
        return _struct._unique_consumer_item_22;
      case 23:
        return _struct._unique_consumer_item_23;
      case 24:
        return _struct._unique_consumer_item_24;
      case 25:
        return _struct._unique_consumer_item_25;
      case 26:
        return _struct._unique_consumer_item_26;
      case 27:
        return _struct._unique_consumer_item_27;
      case 28:
        return _struct._unique_consumer_item_28;
      case 29:
        return _struct._unique_consumer_item_29;
      case 30:
        return _struct._unique_consumer_item_30;
      case 31:
        return _struct._unique_consumer_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `padding` in struct `gpio_v2_line_request`.
class ArrayHelper_gpio_v2_line_request_padding_level0 {
  final gpio_v2_line_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_request_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      case 4:
        return _struct._unique_padding_item_4;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      case 4:
        _struct._unique_padding_item_4 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpio_v2_line_info - Information about a certain GPIO line
/// @name: the name of this GPIO line, such as the output pin of the line on
/// the chip, a rail or a pin header name on a board, as specified by the
/// GPIO chip, may be empty (i.e. name[0] == '\0')
/// @consumer: a functional name for the consumer of this GPIO line as set
/// by whatever is using it, will be empty if there is no current user but
/// may also be empty if the consumer doesn't set this up
/// @offset: the local offset on this GPIO chip, fill this in when
/// requesting the line information from the kernel
/// @num_attrs: the number of attributes in @attrs
/// @flags: flags for the GPIO lines, with values from &enum
/// gpio_v2_line_flag, such as %GPIO_V2_LINE_FLAG_ACTIVE_LOW,
/// %GPIO_V2_LINE_FLAG_OUTPUT etc, added together.
/// @attrs: the configuration attributes associated with the line
/// @padding: reserved for future use
class gpio_v2_line_info extends ffi.Struct {
  @ffi.Int8()
  external int _unique_name_item_0;
  @ffi.Int8()
  external int _unique_name_item_1;
  @ffi.Int8()
  external int _unique_name_item_2;
  @ffi.Int8()
  external int _unique_name_item_3;
  @ffi.Int8()
  external int _unique_name_item_4;
  @ffi.Int8()
  external int _unique_name_item_5;
  @ffi.Int8()
  external int _unique_name_item_6;
  @ffi.Int8()
  external int _unique_name_item_7;
  @ffi.Int8()
  external int _unique_name_item_8;
  @ffi.Int8()
  external int _unique_name_item_9;
  @ffi.Int8()
  external int _unique_name_item_10;
  @ffi.Int8()
  external int _unique_name_item_11;
  @ffi.Int8()
  external int _unique_name_item_12;
  @ffi.Int8()
  external int _unique_name_item_13;
  @ffi.Int8()
  external int _unique_name_item_14;
  @ffi.Int8()
  external int _unique_name_item_15;
  @ffi.Int8()
  external int _unique_name_item_16;
  @ffi.Int8()
  external int _unique_name_item_17;
  @ffi.Int8()
  external int _unique_name_item_18;
  @ffi.Int8()
  external int _unique_name_item_19;
  @ffi.Int8()
  external int _unique_name_item_20;
  @ffi.Int8()
  external int _unique_name_item_21;
  @ffi.Int8()
  external int _unique_name_item_22;
  @ffi.Int8()
  external int _unique_name_item_23;
  @ffi.Int8()
  external int _unique_name_item_24;
  @ffi.Int8()
  external int _unique_name_item_25;
  @ffi.Int8()
  external int _unique_name_item_26;
  @ffi.Int8()
  external int _unique_name_item_27;
  @ffi.Int8()
  external int _unique_name_item_28;
  @ffi.Int8()
  external int _unique_name_item_29;
  @ffi.Int8()
  external int _unique_name_item_30;
  @ffi.Int8()
  external int _unique_name_item_31;

  /// Helper for array `name`.
  ArrayHelper_gpio_v2_line_info_name_level0 get name =>
      ArrayHelper_gpio_v2_line_info_name_level0(this, [32], 0, 0);
  @ffi.Int8()
  external int _unique_consumer_item_0;
  @ffi.Int8()
  external int _unique_consumer_item_1;
  @ffi.Int8()
  external int _unique_consumer_item_2;
  @ffi.Int8()
  external int _unique_consumer_item_3;
  @ffi.Int8()
  external int _unique_consumer_item_4;
  @ffi.Int8()
  external int _unique_consumer_item_5;
  @ffi.Int8()
  external int _unique_consumer_item_6;
  @ffi.Int8()
  external int _unique_consumer_item_7;
  @ffi.Int8()
  external int _unique_consumer_item_8;
  @ffi.Int8()
  external int _unique_consumer_item_9;
  @ffi.Int8()
  external int _unique_consumer_item_10;
  @ffi.Int8()
  external int _unique_consumer_item_11;
  @ffi.Int8()
  external int _unique_consumer_item_12;
  @ffi.Int8()
  external int _unique_consumer_item_13;
  @ffi.Int8()
  external int _unique_consumer_item_14;
  @ffi.Int8()
  external int _unique_consumer_item_15;
  @ffi.Int8()
  external int _unique_consumer_item_16;
  @ffi.Int8()
  external int _unique_consumer_item_17;
  @ffi.Int8()
  external int _unique_consumer_item_18;
  @ffi.Int8()
  external int _unique_consumer_item_19;
  @ffi.Int8()
  external int _unique_consumer_item_20;
  @ffi.Int8()
  external int _unique_consumer_item_21;
  @ffi.Int8()
  external int _unique_consumer_item_22;
  @ffi.Int8()
  external int _unique_consumer_item_23;
  @ffi.Int8()
  external int _unique_consumer_item_24;
  @ffi.Int8()
  external int _unique_consumer_item_25;
  @ffi.Int8()
  external int _unique_consumer_item_26;
  @ffi.Int8()
  external int _unique_consumer_item_27;
  @ffi.Int8()
  external int _unique_consumer_item_28;
  @ffi.Int8()
  external int _unique_consumer_item_29;
  @ffi.Int8()
  external int _unique_consumer_item_30;
  @ffi.Int8()
  external int _unique_consumer_item_31;

  /// Helper for array `consumer`.
  ArrayHelper_gpio_v2_line_info_consumer_level0 get consumer =>
      ArrayHelper_gpio_v2_line_info_consumer_level0(this, [32], 0, 0);
  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int num_attrs;

  @ffi.Uint64()
  external int flags;

  external gpio_v2_line_attribute _unique_attrs_item_0;
  external gpio_v2_line_attribute _unique_attrs_item_1;
  external gpio_v2_line_attribute _unique_attrs_item_2;
  external gpio_v2_line_attribute _unique_attrs_item_3;
  external gpio_v2_line_attribute _unique_attrs_item_4;
  external gpio_v2_line_attribute _unique_attrs_item_5;
  external gpio_v2_line_attribute _unique_attrs_item_6;
  external gpio_v2_line_attribute _unique_attrs_item_7;
  external gpio_v2_line_attribute _unique_attrs_item_8;
  external gpio_v2_line_attribute _unique_attrs_item_9;

  /// Helper for array `attrs`.
  ArrayHelper_gpio_v2_line_info_attrs_level0 get attrs =>
      ArrayHelper_gpio_v2_line_info_attrs_level0(this, [10], 0, 0);
  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;

  /// Helper for array `padding`.
  ArrayHelper_gpio_v2_line_info_padding_level0 get padding =>
      ArrayHelper_gpio_v2_line_info_padding_level0(this, [4], 0, 0);
}

/// Helper for array `name` in struct `gpio_v2_line_info`.
class ArrayHelper_gpio_v2_line_info_name_level0 {
  final gpio_v2_line_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_info_name_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_name_item_0;
      case 1:
        return _struct._unique_name_item_1;
      case 2:
        return _struct._unique_name_item_2;
      case 3:
        return _struct._unique_name_item_3;
      case 4:
        return _struct._unique_name_item_4;
      case 5:
        return _struct._unique_name_item_5;
      case 6:
        return _struct._unique_name_item_6;
      case 7:
        return _struct._unique_name_item_7;
      case 8:
        return _struct._unique_name_item_8;
      case 9:
        return _struct._unique_name_item_9;
      case 10:
        return _struct._unique_name_item_10;
      case 11:
        return _struct._unique_name_item_11;
      case 12:
        return _struct._unique_name_item_12;
      case 13:
        return _struct._unique_name_item_13;
      case 14:
        return _struct._unique_name_item_14;
      case 15:
        return _struct._unique_name_item_15;
      case 16:
        return _struct._unique_name_item_16;
      case 17:
        return _struct._unique_name_item_17;
      case 18:
        return _struct._unique_name_item_18;
      case 19:
        return _struct._unique_name_item_19;
      case 20:
        return _struct._unique_name_item_20;
      case 21:
        return _struct._unique_name_item_21;
      case 22:
        return _struct._unique_name_item_22;
      case 23:
        return _struct._unique_name_item_23;
      case 24:
        return _struct._unique_name_item_24;
      case 25:
        return _struct._unique_name_item_25;
      case 26:
        return _struct._unique_name_item_26;
      case 27:
        return _struct._unique_name_item_27;
      case 28:
        return _struct._unique_name_item_28;
      case 29:
        return _struct._unique_name_item_29;
      case 30:
        return _struct._unique_name_item_30;
      case 31:
        return _struct._unique_name_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_name_item_0 = value;
        break;
      case 1:
        _struct._unique_name_item_1 = value;
        break;
      case 2:
        _struct._unique_name_item_2 = value;
        break;
      case 3:
        _struct._unique_name_item_3 = value;
        break;
      case 4:
        _struct._unique_name_item_4 = value;
        break;
      case 5:
        _struct._unique_name_item_5 = value;
        break;
      case 6:
        _struct._unique_name_item_6 = value;
        break;
      case 7:
        _struct._unique_name_item_7 = value;
        break;
      case 8:
        _struct._unique_name_item_8 = value;
        break;
      case 9:
        _struct._unique_name_item_9 = value;
        break;
      case 10:
        _struct._unique_name_item_10 = value;
        break;
      case 11:
        _struct._unique_name_item_11 = value;
        break;
      case 12:
        _struct._unique_name_item_12 = value;
        break;
      case 13:
        _struct._unique_name_item_13 = value;
        break;
      case 14:
        _struct._unique_name_item_14 = value;
        break;
      case 15:
        _struct._unique_name_item_15 = value;
        break;
      case 16:
        _struct._unique_name_item_16 = value;
        break;
      case 17:
        _struct._unique_name_item_17 = value;
        break;
      case 18:
        _struct._unique_name_item_18 = value;
        break;
      case 19:
        _struct._unique_name_item_19 = value;
        break;
      case 20:
        _struct._unique_name_item_20 = value;
        break;
      case 21:
        _struct._unique_name_item_21 = value;
        break;
      case 22:
        _struct._unique_name_item_22 = value;
        break;
      case 23:
        _struct._unique_name_item_23 = value;
        break;
      case 24:
        _struct._unique_name_item_24 = value;
        break;
      case 25:
        _struct._unique_name_item_25 = value;
        break;
      case 26:
        _struct._unique_name_item_26 = value;
        break;
      case 27:
        _struct._unique_name_item_27 = value;
        break;
      case 28:
        _struct._unique_name_item_28 = value;
        break;
      case 29:
        _struct._unique_name_item_29 = value;
        break;
      case 30:
        _struct._unique_name_item_30 = value;
        break;
      case 31:
        _struct._unique_name_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `consumer` in struct `gpio_v2_line_info`.
class ArrayHelper_gpio_v2_line_info_consumer_level0 {
  final gpio_v2_line_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_info_consumer_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_item_0;
      case 1:
        return _struct._unique_consumer_item_1;
      case 2:
        return _struct._unique_consumer_item_2;
      case 3:
        return _struct._unique_consumer_item_3;
      case 4:
        return _struct._unique_consumer_item_4;
      case 5:
        return _struct._unique_consumer_item_5;
      case 6:
        return _struct._unique_consumer_item_6;
      case 7:
        return _struct._unique_consumer_item_7;
      case 8:
        return _struct._unique_consumer_item_8;
      case 9:
        return _struct._unique_consumer_item_9;
      case 10:
        return _struct._unique_consumer_item_10;
      case 11:
        return _struct._unique_consumer_item_11;
      case 12:
        return _struct._unique_consumer_item_12;
      case 13:
        return _struct._unique_consumer_item_13;
      case 14:
        return _struct._unique_consumer_item_14;
      case 15:
        return _struct._unique_consumer_item_15;
      case 16:
        return _struct._unique_consumer_item_16;
      case 17:
        return _struct._unique_consumer_item_17;
      case 18:
        return _struct._unique_consumer_item_18;
      case 19:
        return _struct._unique_consumer_item_19;
      case 20:
        return _struct._unique_consumer_item_20;
      case 21:
        return _struct._unique_consumer_item_21;
      case 22:
        return _struct._unique_consumer_item_22;
      case 23:
        return _struct._unique_consumer_item_23;
      case 24:
        return _struct._unique_consumer_item_24;
      case 25:
        return _struct._unique_consumer_item_25;
      case 26:
        return _struct._unique_consumer_item_26;
      case 27:
        return _struct._unique_consumer_item_27;
      case 28:
        return _struct._unique_consumer_item_28;
      case 29:
        return _struct._unique_consumer_item_29;
      case 30:
        return _struct._unique_consumer_item_30;
      case 31:
        return _struct._unique_consumer_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `attrs` in struct `gpio_v2_line_info`.
class ArrayHelper_gpio_v2_line_info_attrs_level0 {
  final gpio_v2_line_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_info_attrs_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  gpio_v2_line_attribute operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_attrs_item_0;
      case 1:
        return _struct._unique_attrs_item_1;
      case 2:
        return _struct._unique_attrs_item_2;
      case 3:
        return _struct._unique_attrs_item_3;
      case 4:
        return _struct._unique_attrs_item_4;
      case 5:
        return _struct._unique_attrs_item_5;
      case 6:
        return _struct._unique_attrs_item_6;
      case 7:
        return _struct._unique_attrs_item_7;
      case 8:
        return _struct._unique_attrs_item_8;
      case 9:
        return _struct._unique_attrs_item_9;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, gpio_v2_line_attribute value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_attrs_item_0 = value;
        break;
      case 1:
        _struct._unique_attrs_item_1 = value;
        break;
      case 2:
        _struct._unique_attrs_item_2 = value;
        break;
      case 3:
        _struct._unique_attrs_item_3 = value;
        break;
      case 4:
        _struct._unique_attrs_item_4 = value;
        break;
      case 5:
        _struct._unique_attrs_item_5 = value;
        break;
      case 6:
        _struct._unique_attrs_item_6 = value;
        break;
      case 7:
        _struct._unique_attrs_item_7 = value;
        break;
      case 8:
        _struct._unique_attrs_item_8 = value;
        break;
      case 9:
        _struct._unique_attrs_item_9 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `padding` in struct `gpio_v2_line_info`.
class ArrayHelper_gpio_v2_line_info_padding_level0 {
  final gpio_v2_line_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_info_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpio_v2_line_info_changed - Information about a change in status
/// of a GPIO line
/// @info: updated line information
/// @timestamp_ns: estimate of time of status change occurrence, in nanoseconds
/// @event_type: the type of change with a value from &enum
/// gpio_v2_line_changed_type
/// @padding: reserved for future use
class gpio_v2_line_info_changed extends ffi.Struct {
  external gpio_v2_line_info info;

  @ffi.Uint64()
  external int timestamp_ns;

  @ffi.Uint32()
  external int event_type;

  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;
  @ffi.Uint32()
  external int _unique_padding_item_4;

  /// Helper for array `padding`.
  ArrayHelper_gpio_v2_line_info_changed_padding_level0 get padding =>
      ArrayHelper_gpio_v2_line_info_changed_padding_level0(this, [5], 0, 0);
}

/// Helper for array `padding` in struct `gpio_v2_line_info_changed`.
class ArrayHelper_gpio_v2_line_info_changed_padding_level0 {
  final gpio_v2_line_info_changed _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_info_changed_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      case 4:
        return _struct._unique_padding_item_4;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      case 4:
        _struct._unique_padding_item_4 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpio_v2_line_event - The actual event being pushed to userspace
/// @timestamp_ns: best estimate of time of event occurrence, in nanoseconds.
/// The @timestamp_ns is read from %CLOCK_MONOTONIC and is intended to allow
/// the accurate measurement of the time between events. It does not provide
/// the wall-clock time.
/// @id: event identifier with value from &enum gpio_v2_line_event_id
/// @offset: the offset of the line that triggered the event
/// @seqno: the sequence number for this event in the sequence of events for
/// all the lines in this line request
/// @line_seqno: the sequence number for this event in the sequence of
/// events on this particular line
/// @padding: reserved for future use
class gpio_v2_line_event extends ffi.Struct {
  @ffi.Uint64()
  external int timestamp_ns;

  @ffi.Uint32()
  external int id;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int seqno;

  @ffi.Uint32()
  external int line_seqno;

  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;
  @ffi.Uint32()
  external int _unique_padding_item_4;
  @ffi.Uint32()
  external int _unique_padding_item_5;

  /// Helper for array `padding`.
  ArrayHelper_gpio_v2_line_event_padding_level0 get padding =>
      ArrayHelper_gpio_v2_line_event_padding_level0(this, [6], 0, 0);
}

/// Helper for array `padding` in struct `gpio_v2_line_event`.
class ArrayHelper_gpio_v2_line_event_padding_level0 {
  final gpio_v2_line_event _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpio_v2_line_event_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      case 4:
        return _struct._unique_padding_item_4;
      case 5:
        return _struct._unique_padding_item_5;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      case 4:
        _struct._unique_padding_item_4 = value;
        break;
      case 5:
        _struct._unique_padding_item_5 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioline_info - Information about a certain GPIO line
/// @line_offset: the local offset on this GPIO device, fill this in when
/// requesting the line information from the kernel
/// @flags: various flags for this line
/// @name: the name of this GPIO line, such as the output pin of the line on the
/// chip, a rail or a pin header name on a board, as specified by the gpio
/// chip, may be empty (i.e. name[0] == '\0')
/// @consumer: a functional name for the consumer of this GPIO line as set by
/// whatever is using it, will be empty if there is no current user but may
/// also be empty if the consumer doesn't set this up
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_info instead.
class gpioline_info extends ffi.Struct {
  @ffi.Uint32()
  external int line_offset;

  @ffi.Uint32()
  external int flags;

  @ffi.Int8()
  external int _unique_name_item_0;
  @ffi.Int8()
  external int _unique_name_item_1;
  @ffi.Int8()
  external int _unique_name_item_2;
  @ffi.Int8()
  external int _unique_name_item_3;
  @ffi.Int8()
  external int _unique_name_item_4;
  @ffi.Int8()
  external int _unique_name_item_5;
  @ffi.Int8()
  external int _unique_name_item_6;
  @ffi.Int8()
  external int _unique_name_item_7;
  @ffi.Int8()
  external int _unique_name_item_8;
  @ffi.Int8()
  external int _unique_name_item_9;
  @ffi.Int8()
  external int _unique_name_item_10;
  @ffi.Int8()
  external int _unique_name_item_11;
  @ffi.Int8()
  external int _unique_name_item_12;
  @ffi.Int8()
  external int _unique_name_item_13;
  @ffi.Int8()
  external int _unique_name_item_14;
  @ffi.Int8()
  external int _unique_name_item_15;
  @ffi.Int8()
  external int _unique_name_item_16;
  @ffi.Int8()
  external int _unique_name_item_17;
  @ffi.Int8()
  external int _unique_name_item_18;
  @ffi.Int8()
  external int _unique_name_item_19;
  @ffi.Int8()
  external int _unique_name_item_20;
  @ffi.Int8()
  external int _unique_name_item_21;
  @ffi.Int8()
  external int _unique_name_item_22;
  @ffi.Int8()
  external int _unique_name_item_23;
  @ffi.Int8()
  external int _unique_name_item_24;
  @ffi.Int8()
  external int _unique_name_item_25;
  @ffi.Int8()
  external int _unique_name_item_26;
  @ffi.Int8()
  external int _unique_name_item_27;
  @ffi.Int8()
  external int _unique_name_item_28;
  @ffi.Int8()
  external int _unique_name_item_29;
  @ffi.Int8()
  external int _unique_name_item_30;
  @ffi.Int8()
  external int _unique_name_item_31;

  /// Helper for array `name`.
  ArrayHelper_gpioline_info_name_level0 get name =>
      ArrayHelper_gpioline_info_name_level0(this, [32], 0, 0);
  @ffi.Int8()
  external int _unique_consumer_item_0;
  @ffi.Int8()
  external int _unique_consumer_item_1;
  @ffi.Int8()
  external int _unique_consumer_item_2;
  @ffi.Int8()
  external int _unique_consumer_item_3;
  @ffi.Int8()
  external int _unique_consumer_item_4;
  @ffi.Int8()
  external int _unique_consumer_item_5;
  @ffi.Int8()
  external int _unique_consumer_item_6;
  @ffi.Int8()
  external int _unique_consumer_item_7;
  @ffi.Int8()
  external int _unique_consumer_item_8;
  @ffi.Int8()
  external int _unique_consumer_item_9;
  @ffi.Int8()
  external int _unique_consumer_item_10;
  @ffi.Int8()
  external int _unique_consumer_item_11;
  @ffi.Int8()
  external int _unique_consumer_item_12;
  @ffi.Int8()
  external int _unique_consumer_item_13;
  @ffi.Int8()
  external int _unique_consumer_item_14;
  @ffi.Int8()
  external int _unique_consumer_item_15;
  @ffi.Int8()
  external int _unique_consumer_item_16;
  @ffi.Int8()
  external int _unique_consumer_item_17;
  @ffi.Int8()
  external int _unique_consumer_item_18;
  @ffi.Int8()
  external int _unique_consumer_item_19;
  @ffi.Int8()
  external int _unique_consumer_item_20;
  @ffi.Int8()
  external int _unique_consumer_item_21;
  @ffi.Int8()
  external int _unique_consumer_item_22;
  @ffi.Int8()
  external int _unique_consumer_item_23;
  @ffi.Int8()
  external int _unique_consumer_item_24;
  @ffi.Int8()
  external int _unique_consumer_item_25;
  @ffi.Int8()
  external int _unique_consumer_item_26;
  @ffi.Int8()
  external int _unique_consumer_item_27;
  @ffi.Int8()
  external int _unique_consumer_item_28;
  @ffi.Int8()
  external int _unique_consumer_item_29;
  @ffi.Int8()
  external int _unique_consumer_item_30;
  @ffi.Int8()
  external int _unique_consumer_item_31;

  /// Helper for array `consumer`.
  ArrayHelper_gpioline_info_consumer_level0 get consumer =>
      ArrayHelper_gpioline_info_consumer_level0(this, [32], 0, 0);
}

/// Helper for array `name` in struct `gpioline_info`.
class ArrayHelper_gpioline_info_name_level0 {
  final gpioline_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioline_info_name_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_name_item_0;
      case 1:
        return _struct._unique_name_item_1;
      case 2:
        return _struct._unique_name_item_2;
      case 3:
        return _struct._unique_name_item_3;
      case 4:
        return _struct._unique_name_item_4;
      case 5:
        return _struct._unique_name_item_5;
      case 6:
        return _struct._unique_name_item_6;
      case 7:
        return _struct._unique_name_item_7;
      case 8:
        return _struct._unique_name_item_8;
      case 9:
        return _struct._unique_name_item_9;
      case 10:
        return _struct._unique_name_item_10;
      case 11:
        return _struct._unique_name_item_11;
      case 12:
        return _struct._unique_name_item_12;
      case 13:
        return _struct._unique_name_item_13;
      case 14:
        return _struct._unique_name_item_14;
      case 15:
        return _struct._unique_name_item_15;
      case 16:
        return _struct._unique_name_item_16;
      case 17:
        return _struct._unique_name_item_17;
      case 18:
        return _struct._unique_name_item_18;
      case 19:
        return _struct._unique_name_item_19;
      case 20:
        return _struct._unique_name_item_20;
      case 21:
        return _struct._unique_name_item_21;
      case 22:
        return _struct._unique_name_item_22;
      case 23:
        return _struct._unique_name_item_23;
      case 24:
        return _struct._unique_name_item_24;
      case 25:
        return _struct._unique_name_item_25;
      case 26:
        return _struct._unique_name_item_26;
      case 27:
        return _struct._unique_name_item_27;
      case 28:
        return _struct._unique_name_item_28;
      case 29:
        return _struct._unique_name_item_29;
      case 30:
        return _struct._unique_name_item_30;
      case 31:
        return _struct._unique_name_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_name_item_0 = value;
        break;
      case 1:
        _struct._unique_name_item_1 = value;
        break;
      case 2:
        _struct._unique_name_item_2 = value;
        break;
      case 3:
        _struct._unique_name_item_3 = value;
        break;
      case 4:
        _struct._unique_name_item_4 = value;
        break;
      case 5:
        _struct._unique_name_item_5 = value;
        break;
      case 6:
        _struct._unique_name_item_6 = value;
        break;
      case 7:
        _struct._unique_name_item_7 = value;
        break;
      case 8:
        _struct._unique_name_item_8 = value;
        break;
      case 9:
        _struct._unique_name_item_9 = value;
        break;
      case 10:
        _struct._unique_name_item_10 = value;
        break;
      case 11:
        _struct._unique_name_item_11 = value;
        break;
      case 12:
        _struct._unique_name_item_12 = value;
        break;
      case 13:
        _struct._unique_name_item_13 = value;
        break;
      case 14:
        _struct._unique_name_item_14 = value;
        break;
      case 15:
        _struct._unique_name_item_15 = value;
        break;
      case 16:
        _struct._unique_name_item_16 = value;
        break;
      case 17:
        _struct._unique_name_item_17 = value;
        break;
      case 18:
        _struct._unique_name_item_18 = value;
        break;
      case 19:
        _struct._unique_name_item_19 = value;
        break;
      case 20:
        _struct._unique_name_item_20 = value;
        break;
      case 21:
        _struct._unique_name_item_21 = value;
        break;
      case 22:
        _struct._unique_name_item_22 = value;
        break;
      case 23:
        _struct._unique_name_item_23 = value;
        break;
      case 24:
        _struct._unique_name_item_24 = value;
        break;
      case 25:
        _struct._unique_name_item_25 = value;
        break;
      case 26:
        _struct._unique_name_item_26 = value;
        break;
      case 27:
        _struct._unique_name_item_27 = value;
        break;
      case 28:
        _struct._unique_name_item_28 = value;
        break;
      case 29:
        _struct._unique_name_item_29 = value;
        break;
      case 30:
        _struct._unique_name_item_30 = value;
        break;
      case 31:
        _struct._unique_name_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `consumer` in struct `gpioline_info`.
class ArrayHelper_gpioline_info_consumer_level0 {
  final gpioline_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioline_info_consumer_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_item_0;
      case 1:
        return _struct._unique_consumer_item_1;
      case 2:
        return _struct._unique_consumer_item_2;
      case 3:
        return _struct._unique_consumer_item_3;
      case 4:
        return _struct._unique_consumer_item_4;
      case 5:
        return _struct._unique_consumer_item_5;
      case 6:
        return _struct._unique_consumer_item_6;
      case 7:
        return _struct._unique_consumer_item_7;
      case 8:
        return _struct._unique_consumer_item_8;
      case 9:
        return _struct._unique_consumer_item_9;
      case 10:
        return _struct._unique_consumer_item_10;
      case 11:
        return _struct._unique_consumer_item_11;
      case 12:
        return _struct._unique_consumer_item_12;
      case 13:
        return _struct._unique_consumer_item_13;
      case 14:
        return _struct._unique_consumer_item_14;
      case 15:
        return _struct._unique_consumer_item_15;
      case 16:
        return _struct._unique_consumer_item_16;
      case 17:
        return _struct._unique_consumer_item_17;
      case 18:
        return _struct._unique_consumer_item_18;
      case 19:
        return _struct._unique_consumer_item_19;
      case 20:
        return _struct._unique_consumer_item_20;
      case 21:
        return _struct._unique_consumer_item_21;
      case 22:
        return _struct._unique_consumer_item_22;
      case 23:
        return _struct._unique_consumer_item_23;
      case 24:
        return _struct._unique_consumer_item_24;
      case 25:
        return _struct._unique_consumer_item_25;
      case 26:
        return _struct._unique_consumer_item_26;
      case 27:
        return _struct._unique_consumer_item_27;
      case 28:
        return _struct._unique_consumer_item_28;
      case 29:
        return _struct._unique_consumer_item_29;
      case 30:
        return _struct._unique_consumer_item_30;
      case 31:
        return _struct._unique_consumer_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioline_info_changed - Information about a change in status
/// of a GPIO line
/// @info: updated line information
/// @timestamp: estimate of time of status change occurrence, in nanoseconds
/// @event_type: one of %GPIOLINE_CHANGED_REQUESTED,
/// %GPIOLINE_CHANGED_RELEASED and %GPIOLINE_CHANGED_CONFIG
/// @padding: reserved for future use
///
/// The &struct gpioline_info embedded here has 32-bit alignment on its own,
/// but it works fine with 64-bit alignment too. With its 72 byte size, we can
/// guarantee there are no implicit holes between it and subsequent members.
/// The 20-byte padding at the end makes sure we don't add any implicit padding
/// at the end of the structure on 64-bit architectures.
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_info_changed instead.
class gpioline_info_changed extends ffi.Struct {
  external gpioline_info info;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Uint32()
  external int event_type;

  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;
  @ffi.Uint32()
  external int _unique_padding_item_4;

  /// Helper for array `padding`.
  ArrayHelper_gpioline_info_changed_padding_level0 get padding =>
      ArrayHelper_gpioline_info_changed_padding_level0(this, [5], 0, 0);
}

/// Helper for array `padding` in struct `gpioline_info_changed`.
class ArrayHelper_gpioline_info_changed_padding_level0 {
  final gpioline_info_changed _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioline_info_changed_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      case 4:
        return _struct._unique_padding_item_4;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      case 4:
        _struct._unique_padding_item_4 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiohandle_request - Information about a GPIO handle request
/// @lineoffsets: an array of desired lines, specified by offset index for the
/// associated GPIO device
/// @flags: desired flags for the desired GPIO lines, such as
/// %GPIOHANDLE_REQUEST_OUTPUT, %GPIOHANDLE_REQUEST_ACTIVE_LOW etc, added
/// together. Note that even if multiple lines are requested, the same flags
/// must be applicable to all of them, if you want lines with individual
/// flags set, request them one by one. It is possible to select
/// a batch of input or output lines, but they must all have the same
/// characteristics, i.e. all inputs or all outputs, all active low etc
/// @default_values: if the %GPIOHANDLE_REQUEST_OUTPUT is set for a requested
/// line, this specifies the default output value, should be 0 (low) or
/// 1 (high), anything else than 0 or 1 will be interpreted as 1 (high)
/// @consumer_label: a desired consumer label for the selected GPIO line(s)
/// such as "my-bitbanged-relay"
/// @lines: number of lines requested in this request, i.e. the number of
/// valid fields in the above arrays, set to 1 to request a single line
/// @fd: if successful this field will contain a valid anonymous file handle
/// after a %GPIO_GET_LINEHANDLE_IOCTL operation, zero or negative value
/// means error
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_request instead.
class gpiohandle_request extends ffi.Struct {
  @ffi.Uint32()
  external int _unique_lineoffsets_item_0;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_1;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_2;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_3;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_4;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_5;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_6;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_7;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_8;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_9;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_10;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_11;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_12;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_13;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_14;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_15;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_16;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_17;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_18;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_19;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_20;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_21;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_22;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_23;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_24;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_25;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_26;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_27;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_28;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_29;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_30;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_31;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_32;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_33;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_34;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_35;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_36;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_37;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_38;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_39;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_40;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_41;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_42;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_43;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_44;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_45;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_46;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_47;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_48;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_49;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_50;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_51;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_52;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_53;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_54;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_55;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_56;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_57;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_58;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_59;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_60;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_61;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_62;
  @ffi.Uint32()
  external int _unique_lineoffsets_item_63;

  /// Helper for array `lineoffsets`.
  ArrayHelper_gpiohandle_request_lineoffsets_level0 get lineoffsets =>
      ArrayHelper_gpiohandle_request_lineoffsets_level0(this, [64], 0, 0);
  @ffi.Uint32()
  external int flags;

  @ffi.Uint8()
  external int _unique_default_values_item_0;
  @ffi.Uint8()
  external int _unique_default_values_item_1;
  @ffi.Uint8()
  external int _unique_default_values_item_2;
  @ffi.Uint8()
  external int _unique_default_values_item_3;
  @ffi.Uint8()
  external int _unique_default_values_item_4;
  @ffi.Uint8()
  external int _unique_default_values_item_5;
  @ffi.Uint8()
  external int _unique_default_values_item_6;
  @ffi.Uint8()
  external int _unique_default_values_item_7;
  @ffi.Uint8()
  external int _unique_default_values_item_8;
  @ffi.Uint8()
  external int _unique_default_values_item_9;
  @ffi.Uint8()
  external int _unique_default_values_item_10;
  @ffi.Uint8()
  external int _unique_default_values_item_11;
  @ffi.Uint8()
  external int _unique_default_values_item_12;
  @ffi.Uint8()
  external int _unique_default_values_item_13;
  @ffi.Uint8()
  external int _unique_default_values_item_14;
  @ffi.Uint8()
  external int _unique_default_values_item_15;
  @ffi.Uint8()
  external int _unique_default_values_item_16;
  @ffi.Uint8()
  external int _unique_default_values_item_17;
  @ffi.Uint8()
  external int _unique_default_values_item_18;
  @ffi.Uint8()
  external int _unique_default_values_item_19;
  @ffi.Uint8()
  external int _unique_default_values_item_20;
  @ffi.Uint8()
  external int _unique_default_values_item_21;
  @ffi.Uint8()
  external int _unique_default_values_item_22;
  @ffi.Uint8()
  external int _unique_default_values_item_23;
  @ffi.Uint8()
  external int _unique_default_values_item_24;
  @ffi.Uint8()
  external int _unique_default_values_item_25;
  @ffi.Uint8()
  external int _unique_default_values_item_26;
  @ffi.Uint8()
  external int _unique_default_values_item_27;
  @ffi.Uint8()
  external int _unique_default_values_item_28;
  @ffi.Uint8()
  external int _unique_default_values_item_29;
  @ffi.Uint8()
  external int _unique_default_values_item_30;
  @ffi.Uint8()
  external int _unique_default_values_item_31;
  @ffi.Uint8()
  external int _unique_default_values_item_32;
  @ffi.Uint8()
  external int _unique_default_values_item_33;
  @ffi.Uint8()
  external int _unique_default_values_item_34;
  @ffi.Uint8()
  external int _unique_default_values_item_35;
  @ffi.Uint8()
  external int _unique_default_values_item_36;
  @ffi.Uint8()
  external int _unique_default_values_item_37;
  @ffi.Uint8()
  external int _unique_default_values_item_38;
  @ffi.Uint8()
  external int _unique_default_values_item_39;
  @ffi.Uint8()
  external int _unique_default_values_item_40;
  @ffi.Uint8()
  external int _unique_default_values_item_41;
  @ffi.Uint8()
  external int _unique_default_values_item_42;
  @ffi.Uint8()
  external int _unique_default_values_item_43;
  @ffi.Uint8()
  external int _unique_default_values_item_44;
  @ffi.Uint8()
  external int _unique_default_values_item_45;
  @ffi.Uint8()
  external int _unique_default_values_item_46;
  @ffi.Uint8()
  external int _unique_default_values_item_47;
  @ffi.Uint8()
  external int _unique_default_values_item_48;
  @ffi.Uint8()
  external int _unique_default_values_item_49;
  @ffi.Uint8()
  external int _unique_default_values_item_50;
  @ffi.Uint8()
  external int _unique_default_values_item_51;
  @ffi.Uint8()
  external int _unique_default_values_item_52;
  @ffi.Uint8()
  external int _unique_default_values_item_53;
  @ffi.Uint8()
  external int _unique_default_values_item_54;
  @ffi.Uint8()
  external int _unique_default_values_item_55;
  @ffi.Uint8()
  external int _unique_default_values_item_56;
  @ffi.Uint8()
  external int _unique_default_values_item_57;
  @ffi.Uint8()
  external int _unique_default_values_item_58;
  @ffi.Uint8()
  external int _unique_default_values_item_59;
  @ffi.Uint8()
  external int _unique_default_values_item_60;
  @ffi.Uint8()
  external int _unique_default_values_item_61;
  @ffi.Uint8()
  external int _unique_default_values_item_62;
  @ffi.Uint8()
  external int _unique_default_values_item_63;

  /// Helper for array `default_values`.
  ArrayHelper_gpiohandle_request_default_values_level0 get default_values =>
      ArrayHelper_gpiohandle_request_default_values_level0(this, [64], 0, 0);
  @ffi.Int8()
  external int _unique_consumer_label_item_0;
  @ffi.Int8()
  external int _unique_consumer_label_item_1;
  @ffi.Int8()
  external int _unique_consumer_label_item_2;
  @ffi.Int8()
  external int _unique_consumer_label_item_3;
  @ffi.Int8()
  external int _unique_consumer_label_item_4;
  @ffi.Int8()
  external int _unique_consumer_label_item_5;
  @ffi.Int8()
  external int _unique_consumer_label_item_6;
  @ffi.Int8()
  external int _unique_consumer_label_item_7;
  @ffi.Int8()
  external int _unique_consumer_label_item_8;
  @ffi.Int8()
  external int _unique_consumer_label_item_9;
  @ffi.Int8()
  external int _unique_consumer_label_item_10;
  @ffi.Int8()
  external int _unique_consumer_label_item_11;
  @ffi.Int8()
  external int _unique_consumer_label_item_12;
  @ffi.Int8()
  external int _unique_consumer_label_item_13;
  @ffi.Int8()
  external int _unique_consumer_label_item_14;
  @ffi.Int8()
  external int _unique_consumer_label_item_15;
  @ffi.Int8()
  external int _unique_consumer_label_item_16;
  @ffi.Int8()
  external int _unique_consumer_label_item_17;
  @ffi.Int8()
  external int _unique_consumer_label_item_18;
  @ffi.Int8()
  external int _unique_consumer_label_item_19;
  @ffi.Int8()
  external int _unique_consumer_label_item_20;
  @ffi.Int8()
  external int _unique_consumer_label_item_21;
  @ffi.Int8()
  external int _unique_consumer_label_item_22;
  @ffi.Int8()
  external int _unique_consumer_label_item_23;
  @ffi.Int8()
  external int _unique_consumer_label_item_24;
  @ffi.Int8()
  external int _unique_consumer_label_item_25;
  @ffi.Int8()
  external int _unique_consumer_label_item_26;
  @ffi.Int8()
  external int _unique_consumer_label_item_27;
  @ffi.Int8()
  external int _unique_consumer_label_item_28;
  @ffi.Int8()
  external int _unique_consumer_label_item_29;
  @ffi.Int8()
  external int _unique_consumer_label_item_30;
  @ffi.Int8()
  external int _unique_consumer_label_item_31;

  /// Helper for array `consumer_label`.
  ArrayHelper_gpiohandle_request_consumer_label_level0 get consumer_label =>
      ArrayHelper_gpiohandle_request_consumer_label_level0(this, [32], 0, 0);
  @ffi.Uint32()
  external int lines;

  @ffi.Int32()
  external int fd;
}

/// Helper for array `lineoffsets` in struct `gpiohandle_request`.
class ArrayHelper_gpiohandle_request_lineoffsets_level0 {
  final gpiohandle_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_request_lineoffsets_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_lineoffsets_item_0;
      case 1:
        return _struct._unique_lineoffsets_item_1;
      case 2:
        return _struct._unique_lineoffsets_item_2;
      case 3:
        return _struct._unique_lineoffsets_item_3;
      case 4:
        return _struct._unique_lineoffsets_item_4;
      case 5:
        return _struct._unique_lineoffsets_item_5;
      case 6:
        return _struct._unique_lineoffsets_item_6;
      case 7:
        return _struct._unique_lineoffsets_item_7;
      case 8:
        return _struct._unique_lineoffsets_item_8;
      case 9:
        return _struct._unique_lineoffsets_item_9;
      case 10:
        return _struct._unique_lineoffsets_item_10;
      case 11:
        return _struct._unique_lineoffsets_item_11;
      case 12:
        return _struct._unique_lineoffsets_item_12;
      case 13:
        return _struct._unique_lineoffsets_item_13;
      case 14:
        return _struct._unique_lineoffsets_item_14;
      case 15:
        return _struct._unique_lineoffsets_item_15;
      case 16:
        return _struct._unique_lineoffsets_item_16;
      case 17:
        return _struct._unique_lineoffsets_item_17;
      case 18:
        return _struct._unique_lineoffsets_item_18;
      case 19:
        return _struct._unique_lineoffsets_item_19;
      case 20:
        return _struct._unique_lineoffsets_item_20;
      case 21:
        return _struct._unique_lineoffsets_item_21;
      case 22:
        return _struct._unique_lineoffsets_item_22;
      case 23:
        return _struct._unique_lineoffsets_item_23;
      case 24:
        return _struct._unique_lineoffsets_item_24;
      case 25:
        return _struct._unique_lineoffsets_item_25;
      case 26:
        return _struct._unique_lineoffsets_item_26;
      case 27:
        return _struct._unique_lineoffsets_item_27;
      case 28:
        return _struct._unique_lineoffsets_item_28;
      case 29:
        return _struct._unique_lineoffsets_item_29;
      case 30:
        return _struct._unique_lineoffsets_item_30;
      case 31:
        return _struct._unique_lineoffsets_item_31;
      case 32:
        return _struct._unique_lineoffsets_item_32;
      case 33:
        return _struct._unique_lineoffsets_item_33;
      case 34:
        return _struct._unique_lineoffsets_item_34;
      case 35:
        return _struct._unique_lineoffsets_item_35;
      case 36:
        return _struct._unique_lineoffsets_item_36;
      case 37:
        return _struct._unique_lineoffsets_item_37;
      case 38:
        return _struct._unique_lineoffsets_item_38;
      case 39:
        return _struct._unique_lineoffsets_item_39;
      case 40:
        return _struct._unique_lineoffsets_item_40;
      case 41:
        return _struct._unique_lineoffsets_item_41;
      case 42:
        return _struct._unique_lineoffsets_item_42;
      case 43:
        return _struct._unique_lineoffsets_item_43;
      case 44:
        return _struct._unique_lineoffsets_item_44;
      case 45:
        return _struct._unique_lineoffsets_item_45;
      case 46:
        return _struct._unique_lineoffsets_item_46;
      case 47:
        return _struct._unique_lineoffsets_item_47;
      case 48:
        return _struct._unique_lineoffsets_item_48;
      case 49:
        return _struct._unique_lineoffsets_item_49;
      case 50:
        return _struct._unique_lineoffsets_item_50;
      case 51:
        return _struct._unique_lineoffsets_item_51;
      case 52:
        return _struct._unique_lineoffsets_item_52;
      case 53:
        return _struct._unique_lineoffsets_item_53;
      case 54:
        return _struct._unique_lineoffsets_item_54;
      case 55:
        return _struct._unique_lineoffsets_item_55;
      case 56:
        return _struct._unique_lineoffsets_item_56;
      case 57:
        return _struct._unique_lineoffsets_item_57;
      case 58:
        return _struct._unique_lineoffsets_item_58;
      case 59:
        return _struct._unique_lineoffsets_item_59;
      case 60:
        return _struct._unique_lineoffsets_item_60;
      case 61:
        return _struct._unique_lineoffsets_item_61;
      case 62:
        return _struct._unique_lineoffsets_item_62;
      case 63:
        return _struct._unique_lineoffsets_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_lineoffsets_item_0 = value;
        break;
      case 1:
        _struct._unique_lineoffsets_item_1 = value;
        break;
      case 2:
        _struct._unique_lineoffsets_item_2 = value;
        break;
      case 3:
        _struct._unique_lineoffsets_item_3 = value;
        break;
      case 4:
        _struct._unique_lineoffsets_item_4 = value;
        break;
      case 5:
        _struct._unique_lineoffsets_item_5 = value;
        break;
      case 6:
        _struct._unique_lineoffsets_item_6 = value;
        break;
      case 7:
        _struct._unique_lineoffsets_item_7 = value;
        break;
      case 8:
        _struct._unique_lineoffsets_item_8 = value;
        break;
      case 9:
        _struct._unique_lineoffsets_item_9 = value;
        break;
      case 10:
        _struct._unique_lineoffsets_item_10 = value;
        break;
      case 11:
        _struct._unique_lineoffsets_item_11 = value;
        break;
      case 12:
        _struct._unique_lineoffsets_item_12 = value;
        break;
      case 13:
        _struct._unique_lineoffsets_item_13 = value;
        break;
      case 14:
        _struct._unique_lineoffsets_item_14 = value;
        break;
      case 15:
        _struct._unique_lineoffsets_item_15 = value;
        break;
      case 16:
        _struct._unique_lineoffsets_item_16 = value;
        break;
      case 17:
        _struct._unique_lineoffsets_item_17 = value;
        break;
      case 18:
        _struct._unique_lineoffsets_item_18 = value;
        break;
      case 19:
        _struct._unique_lineoffsets_item_19 = value;
        break;
      case 20:
        _struct._unique_lineoffsets_item_20 = value;
        break;
      case 21:
        _struct._unique_lineoffsets_item_21 = value;
        break;
      case 22:
        _struct._unique_lineoffsets_item_22 = value;
        break;
      case 23:
        _struct._unique_lineoffsets_item_23 = value;
        break;
      case 24:
        _struct._unique_lineoffsets_item_24 = value;
        break;
      case 25:
        _struct._unique_lineoffsets_item_25 = value;
        break;
      case 26:
        _struct._unique_lineoffsets_item_26 = value;
        break;
      case 27:
        _struct._unique_lineoffsets_item_27 = value;
        break;
      case 28:
        _struct._unique_lineoffsets_item_28 = value;
        break;
      case 29:
        _struct._unique_lineoffsets_item_29 = value;
        break;
      case 30:
        _struct._unique_lineoffsets_item_30 = value;
        break;
      case 31:
        _struct._unique_lineoffsets_item_31 = value;
        break;
      case 32:
        _struct._unique_lineoffsets_item_32 = value;
        break;
      case 33:
        _struct._unique_lineoffsets_item_33 = value;
        break;
      case 34:
        _struct._unique_lineoffsets_item_34 = value;
        break;
      case 35:
        _struct._unique_lineoffsets_item_35 = value;
        break;
      case 36:
        _struct._unique_lineoffsets_item_36 = value;
        break;
      case 37:
        _struct._unique_lineoffsets_item_37 = value;
        break;
      case 38:
        _struct._unique_lineoffsets_item_38 = value;
        break;
      case 39:
        _struct._unique_lineoffsets_item_39 = value;
        break;
      case 40:
        _struct._unique_lineoffsets_item_40 = value;
        break;
      case 41:
        _struct._unique_lineoffsets_item_41 = value;
        break;
      case 42:
        _struct._unique_lineoffsets_item_42 = value;
        break;
      case 43:
        _struct._unique_lineoffsets_item_43 = value;
        break;
      case 44:
        _struct._unique_lineoffsets_item_44 = value;
        break;
      case 45:
        _struct._unique_lineoffsets_item_45 = value;
        break;
      case 46:
        _struct._unique_lineoffsets_item_46 = value;
        break;
      case 47:
        _struct._unique_lineoffsets_item_47 = value;
        break;
      case 48:
        _struct._unique_lineoffsets_item_48 = value;
        break;
      case 49:
        _struct._unique_lineoffsets_item_49 = value;
        break;
      case 50:
        _struct._unique_lineoffsets_item_50 = value;
        break;
      case 51:
        _struct._unique_lineoffsets_item_51 = value;
        break;
      case 52:
        _struct._unique_lineoffsets_item_52 = value;
        break;
      case 53:
        _struct._unique_lineoffsets_item_53 = value;
        break;
      case 54:
        _struct._unique_lineoffsets_item_54 = value;
        break;
      case 55:
        _struct._unique_lineoffsets_item_55 = value;
        break;
      case 56:
        _struct._unique_lineoffsets_item_56 = value;
        break;
      case 57:
        _struct._unique_lineoffsets_item_57 = value;
        break;
      case 58:
        _struct._unique_lineoffsets_item_58 = value;
        break;
      case 59:
        _struct._unique_lineoffsets_item_59 = value;
        break;
      case 60:
        _struct._unique_lineoffsets_item_60 = value;
        break;
      case 61:
        _struct._unique_lineoffsets_item_61 = value;
        break;
      case 62:
        _struct._unique_lineoffsets_item_62 = value;
        break;
      case 63:
        _struct._unique_lineoffsets_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `default_values` in struct `gpiohandle_request`.
class ArrayHelper_gpiohandle_request_default_values_level0 {
  final gpiohandle_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_request_default_values_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_default_values_item_0;
      case 1:
        return _struct._unique_default_values_item_1;
      case 2:
        return _struct._unique_default_values_item_2;
      case 3:
        return _struct._unique_default_values_item_3;
      case 4:
        return _struct._unique_default_values_item_4;
      case 5:
        return _struct._unique_default_values_item_5;
      case 6:
        return _struct._unique_default_values_item_6;
      case 7:
        return _struct._unique_default_values_item_7;
      case 8:
        return _struct._unique_default_values_item_8;
      case 9:
        return _struct._unique_default_values_item_9;
      case 10:
        return _struct._unique_default_values_item_10;
      case 11:
        return _struct._unique_default_values_item_11;
      case 12:
        return _struct._unique_default_values_item_12;
      case 13:
        return _struct._unique_default_values_item_13;
      case 14:
        return _struct._unique_default_values_item_14;
      case 15:
        return _struct._unique_default_values_item_15;
      case 16:
        return _struct._unique_default_values_item_16;
      case 17:
        return _struct._unique_default_values_item_17;
      case 18:
        return _struct._unique_default_values_item_18;
      case 19:
        return _struct._unique_default_values_item_19;
      case 20:
        return _struct._unique_default_values_item_20;
      case 21:
        return _struct._unique_default_values_item_21;
      case 22:
        return _struct._unique_default_values_item_22;
      case 23:
        return _struct._unique_default_values_item_23;
      case 24:
        return _struct._unique_default_values_item_24;
      case 25:
        return _struct._unique_default_values_item_25;
      case 26:
        return _struct._unique_default_values_item_26;
      case 27:
        return _struct._unique_default_values_item_27;
      case 28:
        return _struct._unique_default_values_item_28;
      case 29:
        return _struct._unique_default_values_item_29;
      case 30:
        return _struct._unique_default_values_item_30;
      case 31:
        return _struct._unique_default_values_item_31;
      case 32:
        return _struct._unique_default_values_item_32;
      case 33:
        return _struct._unique_default_values_item_33;
      case 34:
        return _struct._unique_default_values_item_34;
      case 35:
        return _struct._unique_default_values_item_35;
      case 36:
        return _struct._unique_default_values_item_36;
      case 37:
        return _struct._unique_default_values_item_37;
      case 38:
        return _struct._unique_default_values_item_38;
      case 39:
        return _struct._unique_default_values_item_39;
      case 40:
        return _struct._unique_default_values_item_40;
      case 41:
        return _struct._unique_default_values_item_41;
      case 42:
        return _struct._unique_default_values_item_42;
      case 43:
        return _struct._unique_default_values_item_43;
      case 44:
        return _struct._unique_default_values_item_44;
      case 45:
        return _struct._unique_default_values_item_45;
      case 46:
        return _struct._unique_default_values_item_46;
      case 47:
        return _struct._unique_default_values_item_47;
      case 48:
        return _struct._unique_default_values_item_48;
      case 49:
        return _struct._unique_default_values_item_49;
      case 50:
        return _struct._unique_default_values_item_50;
      case 51:
        return _struct._unique_default_values_item_51;
      case 52:
        return _struct._unique_default_values_item_52;
      case 53:
        return _struct._unique_default_values_item_53;
      case 54:
        return _struct._unique_default_values_item_54;
      case 55:
        return _struct._unique_default_values_item_55;
      case 56:
        return _struct._unique_default_values_item_56;
      case 57:
        return _struct._unique_default_values_item_57;
      case 58:
        return _struct._unique_default_values_item_58;
      case 59:
        return _struct._unique_default_values_item_59;
      case 60:
        return _struct._unique_default_values_item_60;
      case 61:
        return _struct._unique_default_values_item_61;
      case 62:
        return _struct._unique_default_values_item_62;
      case 63:
        return _struct._unique_default_values_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_default_values_item_0 = value;
        break;
      case 1:
        _struct._unique_default_values_item_1 = value;
        break;
      case 2:
        _struct._unique_default_values_item_2 = value;
        break;
      case 3:
        _struct._unique_default_values_item_3 = value;
        break;
      case 4:
        _struct._unique_default_values_item_4 = value;
        break;
      case 5:
        _struct._unique_default_values_item_5 = value;
        break;
      case 6:
        _struct._unique_default_values_item_6 = value;
        break;
      case 7:
        _struct._unique_default_values_item_7 = value;
        break;
      case 8:
        _struct._unique_default_values_item_8 = value;
        break;
      case 9:
        _struct._unique_default_values_item_9 = value;
        break;
      case 10:
        _struct._unique_default_values_item_10 = value;
        break;
      case 11:
        _struct._unique_default_values_item_11 = value;
        break;
      case 12:
        _struct._unique_default_values_item_12 = value;
        break;
      case 13:
        _struct._unique_default_values_item_13 = value;
        break;
      case 14:
        _struct._unique_default_values_item_14 = value;
        break;
      case 15:
        _struct._unique_default_values_item_15 = value;
        break;
      case 16:
        _struct._unique_default_values_item_16 = value;
        break;
      case 17:
        _struct._unique_default_values_item_17 = value;
        break;
      case 18:
        _struct._unique_default_values_item_18 = value;
        break;
      case 19:
        _struct._unique_default_values_item_19 = value;
        break;
      case 20:
        _struct._unique_default_values_item_20 = value;
        break;
      case 21:
        _struct._unique_default_values_item_21 = value;
        break;
      case 22:
        _struct._unique_default_values_item_22 = value;
        break;
      case 23:
        _struct._unique_default_values_item_23 = value;
        break;
      case 24:
        _struct._unique_default_values_item_24 = value;
        break;
      case 25:
        _struct._unique_default_values_item_25 = value;
        break;
      case 26:
        _struct._unique_default_values_item_26 = value;
        break;
      case 27:
        _struct._unique_default_values_item_27 = value;
        break;
      case 28:
        _struct._unique_default_values_item_28 = value;
        break;
      case 29:
        _struct._unique_default_values_item_29 = value;
        break;
      case 30:
        _struct._unique_default_values_item_30 = value;
        break;
      case 31:
        _struct._unique_default_values_item_31 = value;
        break;
      case 32:
        _struct._unique_default_values_item_32 = value;
        break;
      case 33:
        _struct._unique_default_values_item_33 = value;
        break;
      case 34:
        _struct._unique_default_values_item_34 = value;
        break;
      case 35:
        _struct._unique_default_values_item_35 = value;
        break;
      case 36:
        _struct._unique_default_values_item_36 = value;
        break;
      case 37:
        _struct._unique_default_values_item_37 = value;
        break;
      case 38:
        _struct._unique_default_values_item_38 = value;
        break;
      case 39:
        _struct._unique_default_values_item_39 = value;
        break;
      case 40:
        _struct._unique_default_values_item_40 = value;
        break;
      case 41:
        _struct._unique_default_values_item_41 = value;
        break;
      case 42:
        _struct._unique_default_values_item_42 = value;
        break;
      case 43:
        _struct._unique_default_values_item_43 = value;
        break;
      case 44:
        _struct._unique_default_values_item_44 = value;
        break;
      case 45:
        _struct._unique_default_values_item_45 = value;
        break;
      case 46:
        _struct._unique_default_values_item_46 = value;
        break;
      case 47:
        _struct._unique_default_values_item_47 = value;
        break;
      case 48:
        _struct._unique_default_values_item_48 = value;
        break;
      case 49:
        _struct._unique_default_values_item_49 = value;
        break;
      case 50:
        _struct._unique_default_values_item_50 = value;
        break;
      case 51:
        _struct._unique_default_values_item_51 = value;
        break;
      case 52:
        _struct._unique_default_values_item_52 = value;
        break;
      case 53:
        _struct._unique_default_values_item_53 = value;
        break;
      case 54:
        _struct._unique_default_values_item_54 = value;
        break;
      case 55:
        _struct._unique_default_values_item_55 = value;
        break;
      case 56:
        _struct._unique_default_values_item_56 = value;
        break;
      case 57:
        _struct._unique_default_values_item_57 = value;
        break;
      case 58:
        _struct._unique_default_values_item_58 = value;
        break;
      case 59:
        _struct._unique_default_values_item_59 = value;
        break;
      case 60:
        _struct._unique_default_values_item_60 = value;
        break;
      case 61:
        _struct._unique_default_values_item_61 = value;
        break;
      case 62:
        _struct._unique_default_values_item_62 = value;
        break;
      case 63:
        _struct._unique_default_values_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `consumer_label` in struct `gpiohandle_request`.
class ArrayHelper_gpiohandle_request_consumer_label_level0 {
  final gpiohandle_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_request_consumer_label_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_label_item_0;
      case 1:
        return _struct._unique_consumer_label_item_1;
      case 2:
        return _struct._unique_consumer_label_item_2;
      case 3:
        return _struct._unique_consumer_label_item_3;
      case 4:
        return _struct._unique_consumer_label_item_4;
      case 5:
        return _struct._unique_consumer_label_item_5;
      case 6:
        return _struct._unique_consumer_label_item_6;
      case 7:
        return _struct._unique_consumer_label_item_7;
      case 8:
        return _struct._unique_consumer_label_item_8;
      case 9:
        return _struct._unique_consumer_label_item_9;
      case 10:
        return _struct._unique_consumer_label_item_10;
      case 11:
        return _struct._unique_consumer_label_item_11;
      case 12:
        return _struct._unique_consumer_label_item_12;
      case 13:
        return _struct._unique_consumer_label_item_13;
      case 14:
        return _struct._unique_consumer_label_item_14;
      case 15:
        return _struct._unique_consumer_label_item_15;
      case 16:
        return _struct._unique_consumer_label_item_16;
      case 17:
        return _struct._unique_consumer_label_item_17;
      case 18:
        return _struct._unique_consumer_label_item_18;
      case 19:
        return _struct._unique_consumer_label_item_19;
      case 20:
        return _struct._unique_consumer_label_item_20;
      case 21:
        return _struct._unique_consumer_label_item_21;
      case 22:
        return _struct._unique_consumer_label_item_22;
      case 23:
        return _struct._unique_consumer_label_item_23;
      case 24:
        return _struct._unique_consumer_label_item_24;
      case 25:
        return _struct._unique_consumer_label_item_25;
      case 26:
        return _struct._unique_consumer_label_item_26;
      case 27:
        return _struct._unique_consumer_label_item_27;
      case 28:
        return _struct._unique_consumer_label_item_28;
      case 29:
        return _struct._unique_consumer_label_item_29;
      case 30:
        return _struct._unique_consumer_label_item_30;
      case 31:
        return _struct._unique_consumer_label_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_label_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_label_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_label_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_label_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_label_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_label_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_label_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_label_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_label_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_label_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_label_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_label_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_label_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_label_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_label_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_label_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_label_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_label_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_label_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_label_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_label_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_label_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_label_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_label_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_label_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_label_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_label_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_label_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_label_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_label_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_label_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_label_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiohandle_config - Configuration for a GPIO handle request
/// @flags: updated flags for the requested GPIO lines, such as
/// %GPIOHANDLE_REQUEST_OUTPUT, %GPIOHANDLE_REQUEST_ACTIVE_LOW etc, added
/// together
/// @default_values: if the %GPIOHANDLE_REQUEST_OUTPUT is set in flags,
/// this specifies the default output value, should be 0 (low) or
/// 1 (high), anything else than 0 or 1 will be interpreted as 1 (high)
/// @padding: reserved for future use and should be zero filled
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_config instead.
class gpiohandle_config extends ffi.Struct {
  @ffi.Uint32()
  external int flags;

  @ffi.Uint8()
  external int _unique_default_values_item_0;
  @ffi.Uint8()
  external int _unique_default_values_item_1;
  @ffi.Uint8()
  external int _unique_default_values_item_2;
  @ffi.Uint8()
  external int _unique_default_values_item_3;
  @ffi.Uint8()
  external int _unique_default_values_item_4;
  @ffi.Uint8()
  external int _unique_default_values_item_5;
  @ffi.Uint8()
  external int _unique_default_values_item_6;
  @ffi.Uint8()
  external int _unique_default_values_item_7;
  @ffi.Uint8()
  external int _unique_default_values_item_8;
  @ffi.Uint8()
  external int _unique_default_values_item_9;
  @ffi.Uint8()
  external int _unique_default_values_item_10;
  @ffi.Uint8()
  external int _unique_default_values_item_11;
  @ffi.Uint8()
  external int _unique_default_values_item_12;
  @ffi.Uint8()
  external int _unique_default_values_item_13;
  @ffi.Uint8()
  external int _unique_default_values_item_14;
  @ffi.Uint8()
  external int _unique_default_values_item_15;
  @ffi.Uint8()
  external int _unique_default_values_item_16;
  @ffi.Uint8()
  external int _unique_default_values_item_17;
  @ffi.Uint8()
  external int _unique_default_values_item_18;
  @ffi.Uint8()
  external int _unique_default_values_item_19;
  @ffi.Uint8()
  external int _unique_default_values_item_20;
  @ffi.Uint8()
  external int _unique_default_values_item_21;
  @ffi.Uint8()
  external int _unique_default_values_item_22;
  @ffi.Uint8()
  external int _unique_default_values_item_23;
  @ffi.Uint8()
  external int _unique_default_values_item_24;
  @ffi.Uint8()
  external int _unique_default_values_item_25;
  @ffi.Uint8()
  external int _unique_default_values_item_26;
  @ffi.Uint8()
  external int _unique_default_values_item_27;
  @ffi.Uint8()
  external int _unique_default_values_item_28;
  @ffi.Uint8()
  external int _unique_default_values_item_29;
  @ffi.Uint8()
  external int _unique_default_values_item_30;
  @ffi.Uint8()
  external int _unique_default_values_item_31;
  @ffi.Uint8()
  external int _unique_default_values_item_32;
  @ffi.Uint8()
  external int _unique_default_values_item_33;
  @ffi.Uint8()
  external int _unique_default_values_item_34;
  @ffi.Uint8()
  external int _unique_default_values_item_35;
  @ffi.Uint8()
  external int _unique_default_values_item_36;
  @ffi.Uint8()
  external int _unique_default_values_item_37;
  @ffi.Uint8()
  external int _unique_default_values_item_38;
  @ffi.Uint8()
  external int _unique_default_values_item_39;
  @ffi.Uint8()
  external int _unique_default_values_item_40;
  @ffi.Uint8()
  external int _unique_default_values_item_41;
  @ffi.Uint8()
  external int _unique_default_values_item_42;
  @ffi.Uint8()
  external int _unique_default_values_item_43;
  @ffi.Uint8()
  external int _unique_default_values_item_44;
  @ffi.Uint8()
  external int _unique_default_values_item_45;
  @ffi.Uint8()
  external int _unique_default_values_item_46;
  @ffi.Uint8()
  external int _unique_default_values_item_47;
  @ffi.Uint8()
  external int _unique_default_values_item_48;
  @ffi.Uint8()
  external int _unique_default_values_item_49;
  @ffi.Uint8()
  external int _unique_default_values_item_50;
  @ffi.Uint8()
  external int _unique_default_values_item_51;
  @ffi.Uint8()
  external int _unique_default_values_item_52;
  @ffi.Uint8()
  external int _unique_default_values_item_53;
  @ffi.Uint8()
  external int _unique_default_values_item_54;
  @ffi.Uint8()
  external int _unique_default_values_item_55;
  @ffi.Uint8()
  external int _unique_default_values_item_56;
  @ffi.Uint8()
  external int _unique_default_values_item_57;
  @ffi.Uint8()
  external int _unique_default_values_item_58;
  @ffi.Uint8()
  external int _unique_default_values_item_59;
  @ffi.Uint8()
  external int _unique_default_values_item_60;
  @ffi.Uint8()
  external int _unique_default_values_item_61;
  @ffi.Uint8()
  external int _unique_default_values_item_62;
  @ffi.Uint8()
  external int _unique_default_values_item_63;

  /// Helper for array `default_values`.
  ArrayHelper_gpiohandle_config_default_values_level0 get default_values =>
      ArrayHelper_gpiohandle_config_default_values_level0(this, [64], 0, 0);
  @ffi.Uint32()
  external int _unique_padding_item_0;
  @ffi.Uint32()
  external int _unique_padding_item_1;
  @ffi.Uint32()
  external int _unique_padding_item_2;
  @ffi.Uint32()
  external int _unique_padding_item_3;

  /// Helper for array `padding`.
  ArrayHelper_gpiohandle_config_padding_level0 get padding =>
      ArrayHelper_gpiohandle_config_padding_level0(this, [4], 0, 0);
}

/// Helper for array `default_values` in struct `gpiohandle_config`.
class ArrayHelper_gpiohandle_config_default_values_level0 {
  final gpiohandle_config _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_config_default_values_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_default_values_item_0;
      case 1:
        return _struct._unique_default_values_item_1;
      case 2:
        return _struct._unique_default_values_item_2;
      case 3:
        return _struct._unique_default_values_item_3;
      case 4:
        return _struct._unique_default_values_item_4;
      case 5:
        return _struct._unique_default_values_item_5;
      case 6:
        return _struct._unique_default_values_item_6;
      case 7:
        return _struct._unique_default_values_item_7;
      case 8:
        return _struct._unique_default_values_item_8;
      case 9:
        return _struct._unique_default_values_item_9;
      case 10:
        return _struct._unique_default_values_item_10;
      case 11:
        return _struct._unique_default_values_item_11;
      case 12:
        return _struct._unique_default_values_item_12;
      case 13:
        return _struct._unique_default_values_item_13;
      case 14:
        return _struct._unique_default_values_item_14;
      case 15:
        return _struct._unique_default_values_item_15;
      case 16:
        return _struct._unique_default_values_item_16;
      case 17:
        return _struct._unique_default_values_item_17;
      case 18:
        return _struct._unique_default_values_item_18;
      case 19:
        return _struct._unique_default_values_item_19;
      case 20:
        return _struct._unique_default_values_item_20;
      case 21:
        return _struct._unique_default_values_item_21;
      case 22:
        return _struct._unique_default_values_item_22;
      case 23:
        return _struct._unique_default_values_item_23;
      case 24:
        return _struct._unique_default_values_item_24;
      case 25:
        return _struct._unique_default_values_item_25;
      case 26:
        return _struct._unique_default_values_item_26;
      case 27:
        return _struct._unique_default_values_item_27;
      case 28:
        return _struct._unique_default_values_item_28;
      case 29:
        return _struct._unique_default_values_item_29;
      case 30:
        return _struct._unique_default_values_item_30;
      case 31:
        return _struct._unique_default_values_item_31;
      case 32:
        return _struct._unique_default_values_item_32;
      case 33:
        return _struct._unique_default_values_item_33;
      case 34:
        return _struct._unique_default_values_item_34;
      case 35:
        return _struct._unique_default_values_item_35;
      case 36:
        return _struct._unique_default_values_item_36;
      case 37:
        return _struct._unique_default_values_item_37;
      case 38:
        return _struct._unique_default_values_item_38;
      case 39:
        return _struct._unique_default_values_item_39;
      case 40:
        return _struct._unique_default_values_item_40;
      case 41:
        return _struct._unique_default_values_item_41;
      case 42:
        return _struct._unique_default_values_item_42;
      case 43:
        return _struct._unique_default_values_item_43;
      case 44:
        return _struct._unique_default_values_item_44;
      case 45:
        return _struct._unique_default_values_item_45;
      case 46:
        return _struct._unique_default_values_item_46;
      case 47:
        return _struct._unique_default_values_item_47;
      case 48:
        return _struct._unique_default_values_item_48;
      case 49:
        return _struct._unique_default_values_item_49;
      case 50:
        return _struct._unique_default_values_item_50;
      case 51:
        return _struct._unique_default_values_item_51;
      case 52:
        return _struct._unique_default_values_item_52;
      case 53:
        return _struct._unique_default_values_item_53;
      case 54:
        return _struct._unique_default_values_item_54;
      case 55:
        return _struct._unique_default_values_item_55;
      case 56:
        return _struct._unique_default_values_item_56;
      case 57:
        return _struct._unique_default_values_item_57;
      case 58:
        return _struct._unique_default_values_item_58;
      case 59:
        return _struct._unique_default_values_item_59;
      case 60:
        return _struct._unique_default_values_item_60;
      case 61:
        return _struct._unique_default_values_item_61;
      case 62:
        return _struct._unique_default_values_item_62;
      case 63:
        return _struct._unique_default_values_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_default_values_item_0 = value;
        break;
      case 1:
        _struct._unique_default_values_item_1 = value;
        break;
      case 2:
        _struct._unique_default_values_item_2 = value;
        break;
      case 3:
        _struct._unique_default_values_item_3 = value;
        break;
      case 4:
        _struct._unique_default_values_item_4 = value;
        break;
      case 5:
        _struct._unique_default_values_item_5 = value;
        break;
      case 6:
        _struct._unique_default_values_item_6 = value;
        break;
      case 7:
        _struct._unique_default_values_item_7 = value;
        break;
      case 8:
        _struct._unique_default_values_item_8 = value;
        break;
      case 9:
        _struct._unique_default_values_item_9 = value;
        break;
      case 10:
        _struct._unique_default_values_item_10 = value;
        break;
      case 11:
        _struct._unique_default_values_item_11 = value;
        break;
      case 12:
        _struct._unique_default_values_item_12 = value;
        break;
      case 13:
        _struct._unique_default_values_item_13 = value;
        break;
      case 14:
        _struct._unique_default_values_item_14 = value;
        break;
      case 15:
        _struct._unique_default_values_item_15 = value;
        break;
      case 16:
        _struct._unique_default_values_item_16 = value;
        break;
      case 17:
        _struct._unique_default_values_item_17 = value;
        break;
      case 18:
        _struct._unique_default_values_item_18 = value;
        break;
      case 19:
        _struct._unique_default_values_item_19 = value;
        break;
      case 20:
        _struct._unique_default_values_item_20 = value;
        break;
      case 21:
        _struct._unique_default_values_item_21 = value;
        break;
      case 22:
        _struct._unique_default_values_item_22 = value;
        break;
      case 23:
        _struct._unique_default_values_item_23 = value;
        break;
      case 24:
        _struct._unique_default_values_item_24 = value;
        break;
      case 25:
        _struct._unique_default_values_item_25 = value;
        break;
      case 26:
        _struct._unique_default_values_item_26 = value;
        break;
      case 27:
        _struct._unique_default_values_item_27 = value;
        break;
      case 28:
        _struct._unique_default_values_item_28 = value;
        break;
      case 29:
        _struct._unique_default_values_item_29 = value;
        break;
      case 30:
        _struct._unique_default_values_item_30 = value;
        break;
      case 31:
        _struct._unique_default_values_item_31 = value;
        break;
      case 32:
        _struct._unique_default_values_item_32 = value;
        break;
      case 33:
        _struct._unique_default_values_item_33 = value;
        break;
      case 34:
        _struct._unique_default_values_item_34 = value;
        break;
      case 35:
        _struct._unique_default_values_item_35 = value;
        break;
      case 36:
        _struct._unique_default_values_item_36 = value;
        break;
      case 37:
        _struct._unique_default_values_item_37 = value;
        break;
      case 38:
        _struct._unique_default_values_item_38 = value;
        break;
      case 39:
        _struct._unique_default_values_item_39 = value;
        break;
      case 40:
        _struct._unique_default_values_item_40 = value;
        break;
      case 41:
        _struct._unique_default_values_item_41 = value;
        break;
      case 42:
        _struct._unique_default_values_item_42 = value;
        break;
      case 43:
        _struct._unique_default_values_item_43 = value;
        break;
      case 44:
        _struct._unique_default_values_item_44 = value;
        break;
      case 45:
        _struct._unique_default_values_item_45 = value;
        break;
      case 46:
        _struct._unique_default_values_item_46 = value;
        break;
      case 47:
        _struct._unique_default_values_item_47 = value;
        break;
      case 48:
        _struct._unique_default_values_item_48 = value;
        break;
      case 49:
        _struct._unique_default_values_item_49 = value;
        break;
      case 50:
        _struct._unique_default_values_item_50 = value;
        break;
      case 51:
        _struct._unique_default_values_item_51 = value;
        break;
      case 52:
        _struct._unique_default_values_item_52 = value;
        break;
      case 53:
        _struct._unique_default_values_item_53 = value;
        break;
      case 54:
        _struct._unique_default_values_item_54 = value;
        break;
      case 55:
        _struct._unique_default_values_item_55 = value;
        break;
      case 56:
        _struct._unique_default_values_item_56 = value;
        break;
      case 57:
        _struct._unique_default_values_item_57 = value;
        break;
      case 58:
        _struct._unique_default_values_item_58 = value;
        break;
      case 59:
        _struct._unique_default_values_item_59 = value;
        break;
      case 60:
        _struct._unique_default_values_item_60 = value;
        break;
      case 61:
        _struct._unique_default_values_item_61 = value;
        break;
      case 62:
        _struct._unique_default_values_item_62 = value;
        break;
      case 63:
        _struct._unique_default_values_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `padding` in struct `gpiohandle_config`.
class ArrayHelper_gpiohandle_config_padding_level0 {
  final gpiohandle_config _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_config_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiohandle_data - Information of values on a GPIO handle
/// @values: when getting the state of lines this contains the current
/// state of a line, when setting the state of lines these should contain
/// the desired target state
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_values instead.
class gpiohandle_data extends ffi.Struct {
  @ffi.Uint8()
  external int _unique_values_item_0;
  @ffi.Uint8()
  external int _unique_values_item_1;
  @ffi.Uint8()
  external int _unique_values_item_2;
  @ffi.Uint8()
  external int _unique_values_item_3;
  @ffi.Uint8()
  external int _unique_values_item_4;
  @ffi.Uint8()
  external int _unique_values_item_5;
  @ffi.Uint8()
  external int _unique_values_item_6;
  @ffi.Uint8()
  external int _unique_values_item_7;
  @ffi.Uint8()
  external int _unique_values_item_8;
  @ffi.Uint8()
  external int _unique_values_item_9;
  @ffi.Uint8()
  external int _unique_values_item_10;
  @ffi.Uint8()
  external int _unique_values_item_11;
  @ffi.Uint8()
  external int _unique_values_item_12;
  @ffi.Uint8()
  external int _unique_values_item_13;
  @ffi.Uint8()
  external int _unique_values_item_14;
  @ffi.Uint8()
  external int _unique_values_item_15;
  @ffi.Uint8()
  external int _unique_values_item_16;
  @ffi.Uint8()
  external int _unique_values_item_17;
  @ffi.Uint8()
  external int _unique_values_item_18;
  @ffi.Uint8()
  external int _unique_values_item_19;
  @ffi.Uint8()
  external int _unique_values_item_20;
  @ffi.Uint8()
  external int _unique_values_item_21;
  @ffi.Uint8()
  external int _unique_values_item_22;
  @ffi.Uint8()
  external int _unique_values_item_23;
  @ffi.Uint8()
  external int _unique_values_item_24;
  @ffi.Uint8()
  external int _unique_values_item_25;
  @ffi.Uint8()
  external int _unique_values_item_26;
  @ffi.Uint8()
  external int _unique_values_item_27;
  @ffi.Uint8()
  external int _unique_values_item_28;
  @ffi.Uint8()
  external int _unique_values_item_29;
  @ffi.Uint8()
  external int _unique_values_item_30;
  @ffi.Uint8()
  external int _unique_values_item_31;
  @ffi.Uint8()
  external int _unique_values_item_32;
  @ffi.Uint8()
  external int _unique_values_item_33;
  @ffi.Uint8()
  external int _unique_values_item_34;
  @ffi.Uint8()
  external int _unique_values_item_35;
  @ffi.Uint8()
  external int _unique_values_item_36;
  @ffi.Uint8()
  external int _unique_values_item_37;
  @ffi.Uint8()
  external int _unique_values_item_38;
  @ffi.Uint8()
  external int _unique_values_item_39;
  @ffi.Uint8()
  external int _unique_values_item_40;
  @ffi.Uint8()
  external int _unique_values_item_41;
  @ffi.Uint8()
  external int _unique_values_item_42;
  @ffi.Uint8()
  external int _unique_values_item_43;
  @ffi.Uint8()
  external int _unique_values_item_44;
  @ffi.Uint8()
  external int _unique_values_item_45;
  @ffi.Uint8()
  external int _unique_values_item_46;
  @ffi.Uint8()
  external int _unique_values_item_47;
  @ffi.Uint8()
  external int _unique_values_item_48;
  @ffi.Uint8()
  external int _unique_values_item_49;
  @ffi.Uint8()
  external int _unique_values_item_50;
  @ffi.Uint8()
  external int _unique_values_item_51;
  @ffi.Uint8()
  external int _unique_values_item_52;
  @ffi.Uint8()
  external int _unique_values_item_53;
  @ffi.Uint8()
  external int _unique_values_item_54;
  @ffi.Uint8()
  external int _unique_values_item_55;
  @ffi.Uint8()
  external int _unique_values_item_56;
  @ffi.Uint8()
  external int _unique_values_item_57;
  @ffi.Uint8()
  external int _unique_values_item_58;
  @ffi.Uint8()
  external int _unique_values_item_59;
  @ffi.Uint8()
  external int _unique_values_item_60;
  @ffi.Uint8()
  external int _unique_values_item_61;
  @ffi.Uint8()
  external int _unique_values_item_62;
  @ffi.Uint8()
  external int _unique_values_item_63;

  /// Helper for array `values`.
  ArrayHelper_gpiohandle_data_values_level0 get values =>
      ArrayHelper_gpiohandle_data_values_level0(this, [64], 0, 0);
}

/// Helper for array `values` in struct `gpiohandle_data`.
class ArrayHelper_gpiohandle_data_values_level0 {
  final gpiohandle_data _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_data_values_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_values_item_0;
      case 1:
        return _struct._unique_values_item_1;
      case 2:
        return _struct._unique_values_item_2;
      case 3:
        return _struct._unique_values_item_3;
      case 4:
        return _struct._unique_values_item_4;
      case 5:
        return _struct._unique_values_item_5;
      case 6:
        return _struct._unique_values_item_6;
      case 7:
        return _struct._unique_values_item_7;
      case 8:
        return _struct._unique_values_item_8;
      case 9:
        return _struct._unique_values_item_9;
      case 10:
        return _struct._unique_values_item_10;
      case 11:
        return _struct._unique_values_item_11;
      case 12:
        return _struct._unique_values_item_12;
      case 13:
        return _struct._unique_values_item_13;
      case 14:
        return _struct._unique_values_item_14;
      case 15:
        return _struct._unique_values_item_15;
      case 16:
        return _struct._unique_values_item_16;
      case 17:
        return _struct._unique_values_item_17;
      case 18:
        return _struct._unique_values_item_18;
      case 19:
        return _struct._unique_values_item_19;
      case 20:
        return _struct._unique_values_item_20;
      case 21:
        return _struct._unique_values_item_21;
      case 22:
        return _struct._unique_values_item_22;
      case 23:
        return _struct._unique_values_item_23;
      case 24:
        return _struct._unique_values_item_24;
      case 25:
        return _struct._unique_values_item_25;
      case 26:
        return _struct._unique_values_item_26;
      case 27:
        return _struct._unique_values_item_27;
      case 28:
        return _struct._unique_values_item_28;
      case 29:
        return _struct._unique_values_item_29;
      case 30:
        return _struct._unique_values_item_30;
      case 31:
        return _struct._unique_values_item_31;
      case 32:
        return _struct._unique_values_item_32;
      case 33:
        return _struct._unique_values_item_33;
      case 34:
        return _struct._unique_values_item_34;
      case 35:
        return _struct._unique_values_item_35;
      case 36:
        return _struct._unique_values_item_36;
      case 37:
        return _struct._unique_values_item_37;
      case 38:
        return _struct._unique_values_item_38;
      case 39:
        return _struct._unique_values_item_39;
      case 40:
        return _struct._unique_values_item_40;
      case 41:
        return _struct._unique_values_item_41;
      case 42:
        return _struct._unique_values_item_42;
      case 43:
        return _struct._unique_values_item_43;
      case 44:
        return _struct._unique_values_item_44;
      case 45:
        return _struct._unique_values_item_45;
      case 46:
        return _struct._unique_values_item_46;
      case 47:
        return _struct._unique_values_item_47;
      case 48:
        return _struct._unique_values_item_48;
      case 49:
        return _struct._unique_values_item_49;
      case 50:
        return _struct._unique_values_item_50;
      case 51:
        return _struct._unique_values_item_51;
      case 52:
        return _struct._unique_values_item_52;
      case 53:
        return _struct._unique_values_item_53;
      case 54:
        return _struct._unique_values_item_54;
      case 55:
        return _struct._unique_values_item_55;
      case 56:
        return _struct._unique_values_item_56;
      case 57:
        return _struct._unique_values_item_57;
      case 58:
        return _struct._unique_values_item_58;
      case 59:
        return _struct._unique_values_item_59;
      case 60:
        return _struct._unique_values_item_60;
      case 61:
        return _struct._unique_values_item_61;
      case 62:
        return _struct._unique_values_item_62;
      case 63:
        return _struct._unique_values_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_values_item_0 = value;
        break;
      case 1:
        _struct._unique_values_item_1 = value;
        break;
      case 2:
        _struct._unique_values_item_2 = value;
        break;
      case 3:
        _struct._unique_values_item_3 = value;
        break;
      case 4:
        _struct._unique_values_item_4 = value;
        break;
      case 5:
        _struct._unique_values_item_5 = value;
        break;
      case 6:
        _struct._unique_values_item_6 = value;
        break;
      case 7:
        _struct._unique_values_item_7 = value;
        break;
      case 8:
        _struct._unique_values_item_8 = value;
        break;
      case 9:
        _struct._unique_values_item_9 = value;
        break;
      case 10:
        _struct._unique_values_item_10 = value;
        break;
      case 11:
        _struct._unique_values_item_11 = value;
        break;
      case 12:
        _struct._unique_values_item_12 = value;
        break;
      case 13:
        _struct._unique_values_item_13 = value;
        break;
      case 14:
        _struct._unique_values_item_14 = value;
        break;
      case 15:
        _struct._unique_values_item_15 = value;
        break;
      case 16:
        _struct._unique_values_item_16 = value;
        break;
      case 17:
        _struct._unique_values_item_17 = value;
        break;
      case 18:
        _struct._unique_values_item_18 = value;
        break;
      case 19:
        _struct._unique_values_item_19 = value;
        break;
      case 20:
        _struct._unique_values_item_20 = value;
        break;
      case 21:
        _struct._unique_values_item_21 = value;
        break;
      case 22:
        _struct._unique_values_item_22 = value;
        break;
      case 23:
        _struct._unique_values_item_23 = value;
        break;
      case 24:
        _struct._unique_values_item_24 = value;
        break;
      case 25:
        _struct._unique_values_item_25 = value;
        break;
      case 26:
        _struct._unique_values_item_26 = value;
        break;
      case 27:
        _struct._unique_values_item_27 = value;
        break;
      case 28:
        _struct._unique_values_item_28 = value;
        break;
      case 29:
        _struct._unique_values_item_29 = value;
        break;
      case 30:
        _struct._unique_values_item_30 = value;
        break;
      case 31:
        _struct._unique_values_item_31 = value;
        break;
      case 32:
        _struct._unique_values_item_32 = value;
        break;
      case 33:
        _struct._unique_values_item_33 = value;
        break;
      case 34:
        _struct._unique_values_item_34 = value;
        break;
      case 35:
        _struct._unique_values_item_35 = value;
        break;
      case 36:
        _struct._unique_values_item_36 = value;
        break;
      case 37:
        _struct._unique_values_item_37 = value;
        break;
      case 38:
        _struct._unique_values_item_38 = value;
        break;
      case 39:
        _struct._unique_values_item_39 = value;
        break;
      case 40:
        _struct._unique_values_item_40 = value;
        break;
      case 41:
        _struct._unique_values_item_41 = value;
        break;
      case 42:
        _struct._unique_values_item_42 = value;
        break;
      case 43:
        _struct._unique_values_item_43 = value;
        break;
      case 44:
        _struct._unique_values_item_44 = value;
        break;
      case 45:
        _struct._unique_values_item_45 = value;
        break;
      case 46:
        _struct._unique_values_item_46 = value;
        break;
      case 47:
        _struct._unique_values_item_47 = value;
        break;
      case 48:
        _struct._unique_values_item_48 = value;
        break;
      case 49:
        _struct._unique_values_item_49 = value;
        break;
      case 50:
        _struct._unique_values_item_50 = value;
        break;
      case 51:
        _struct._unique_values_item_51 = value;
        break;
      case 52:
        _struct._unique_values_item_52 = value;
        break;
      case 53:
        _struct._unique_values_item_53 = value;
        break;
      case 54:
        _struct._unique_values_item_54 = value;
        break;
      case 55:
        _struct._unique_values_item_55 = value;
        break;
      case 56:
        _struct._unique_values_item_56 = value;
        break;
      case 57:
        _struct._unique_values_item_57 = value;
        break;
      case 58:
        _struct._unique_values_item_58 = value;
        break;
      case 59:
        _struct._unique_values_item_59 = value;
        break;
      case 60:
        _struct._unique_values_item_60 = value;
        break;
      case 61:
        _struct._unique_values_item_61 = value;
        break;
      case 62:
        _struct._unique_values_item_62 = value;
        break;
      case 63:
        _struct._unique_values_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioevent_request - Information about a GPIO event request
/// @lineoffset: the desired line to subscribe to events from, specified by
/// offset index for the associated GPIO device
/// @handleflags: desired handle flags for the desired GPIO line, such as
/// %GPIOHANDLE_REQUEST_ACTIVE_LOW or %GPIOHANDLE_REQUEST_OPEN_DRAIN
/// @eventflags: desired flags for the desired GPIO event line, such as
/// %GPIOEVENT_REQUEST_RISING_EDGE or %GPIOEVENT_REQUEST_FALLING_EDGE
/// @consumer_label: a desired consumer label for the selected GPIO line(s)
/// such as "my-listener"
/// @fd: if successful this field will contain a valid anonymous file handle
/// after a %GPIO_GET_LINEEVENT_IOCTL operation, zero or negative value
/// means error
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_request instead.
class gpioevent_request extends ffi.Struct {
  @ffi.Uint32()
  external int lineoffset;

  @ffi.Uint32()
  external int handleflags;

  @ffi.Uint32()
  external int eventflags;

  @ffi.Int8()
  external int _unique_consumer_label_item_0;
  @ffi.Int8()
  external int _unique_consumer_label_item_1;
  @ffi.Int8()
  external int _unique_consumer_label_item_2;
  @ffi.Int8()
  external int _unique_consumer_label_item_3;
  @ffi.Int8()
  external int _unique_consumer_label_item_4;
  @ffi.Int8()
  external int _unique_consumer_label_item_5;
  @ffi.Int8()
  external int _unique_consumer_label_item_6;
  @ffi.Int8()
  external int _unique_consumer_label_item_7;
  @ffi.Int8()
  external int _unique_consumer_label_item_8;
  @ffi.Int8()
  external int _unique_consumer_label_item_9;
  @ffi.Int8()
  external int _unique_consumer_label_item_10;
  @ffi.Int8()
  external int _unique_consumer_label_item_11;
  @ffi.Int8()
  external int _unique_consumer_label_item_12;
  @ffi.Int8()
  external int _unique_consumer_label_item_13;
  @ffi.Int8()
  external int _unique_consumer_label_item_14;
  @ffi.Int8()
  external int _unique_consumer_label_item_15;
  @ffi.Int8()
  external int _unique_consumer_label_item_16;
  @ffi.Int8()
  external int _unique_consumer_label_item_17;
  @ffi.Int8()
  external int _unique_consumer_label_item_18;
  @ffi.Int8()
  external int _unique_consumer_label_item_19;
  @ffi.Int8()
  external int _unique_consumer_label_item_20;
  @ffi.Int8()
  external int _unique_consumer_label_item_21;
  @ffi.Int8()
  external int _unique_consumer_label_item_22;
  @ffi.Int8()
  external int _unique_consumer_label_item_23;
  @ffi.Int8()
  external int _unique_consumer_label_item_24;
  @ffi.Int8()
  external int _unique_consumer_label_item_25;
  @ffi.Int8()
  external int _unique_consumer_label_item_26;
  @ffi.Int8()
  external int _unique_consumer_label_item_27;
  @ffi.Int8()
  external int _unique_consumer_label_item_28;
  @ffi.Int8()
  external int _unique_consumer_label_item_29;
  @ffi.Int8()
  external int _unique_consumer_label_item_30;
  @ffi.Int8()
  external int _unique_consumer_label_item_31;

  /// Helper for array `consumer_label`.
  ArrayHelper_gpioevent_request_consumer_label_level0 get consumer_label =>
      ArrayHelper_gpioevent_request_consumer_label_level0(this, [32], 0, 0);
  @ffi.Int32()
  external int fd;
}

/// Helper for array `consumer_label` in struct `gpioevent_request`.
class ArrayHelper_gpioevent_request_consumer_label_level0 {
  final gpioevent_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioevent_request_consumer_label_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_label_item_0;
      case 1:
        return _struct._unique_consumer_label_item_1;
      case 2:
        return _struct._unique_consumer_label_item_2;
      case 3:
        return _struct._unique_consumer_label_item_3;
      case 4:
        return _struct._unique_consumer_label_item_4;
      case 5:
        return _struct._unique_consumer_label_item_5;
      case 6:
        return _struct._unique_consumer_label_item_6;
      case 7:
        return _struct._unique_consumer_label_item_7;
      case 8:
        return _struct._unique_consumer_label_item_8;
      case 9:
        return _struct._unique_consumer_label_item_9;
      case 10:
        return _struct._unique_consumer_label_item_10;
      case 11:
        return _struct._unique_consumer_label_item_11;
      case 12:
        return _struct._unique_consumer_label_item_12;
      case 13:
        return _struct._unique_consumer_label_item_13;
      case 14:
        return _struct._unique_consumer_label_item_14;
      case 15:
        return _struct._unique_consumer_label_item_15;
      case 16:
        return _struct._unique_consumer_label_item_16;
      case 17:
        return _struct._unique_consumer_label_item_17;
      case 18:
        return _struct._unique_consumer_label_item_18;
      case 19:
        return _struct._unique_consumer_label_item_19;
      case 20:
        return _struct._unique_consumer_label_item_20;
      case 21:
        return _struct._unique_consumer_label_item_21;
      case 22:
        return _struct._unique_consumer_label_item_22;
      case 23:
        return _struct._unique_consumer_label_item_23;
      case 24:
        return _struct._unique_consumer_label_item_24;
      case 25:
        return _struct._unique_consumer_label_item_25;
      case 26:
        return _struct._unique_consumer_label_item_26;
      case 27:
        return _struct._unique_consumer_label_item_27;
      case 28:
        return _struct._unique_consumer_label_item_28;
      case 29:
        return _struct._unique_consumer_label_item_29;
      case 30:
        return _struct._unique_consumer_label_item_30;
      case 31:
        return _struct._unique_consumer_label_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_label_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_label_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_label_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_label_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_label_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_label_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_label_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_label_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_label_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_label_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_label_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_label_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_label_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_label_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_label_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_label_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_label_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_label_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_label_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_label_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_label_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_label_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_label_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_label_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_label_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_label_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_label_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_label_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_label_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_label_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_label_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_label_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioevent_data - The actual event being pushed to userspace
/// @timestamp: best estimate of time of event occurrence, in nanoseconds
/// @id: event identifier
///
/// Note: This struct is part of ABI v1 and is deprecated.
/// Use &struct gpio_v2_line_event instead.
class gpioevent_data extends ffi.Struct {
  @ffi.Uint64()
  external int timestamp;

  @ffi.Uint32()
  external int id;
}

/// struct spi_ioc_transfer - describes a single SPI transfer
/// @tx_buf: Holds pointer to userspace buffer with transmit data, or null.
/// If no data is provided, zeroes are shifted out.
/// @rx_buf: Holds pointer to userspace buffer for receive data, or null.
/// @len: Length of tx and rx buffers, in bytes.
/// @speed_hz: Temporary override of the device's bitrate.
/// @bits_per_word: Temporary override of the device's wordsize.
/// @delay_usecs: If nonzero, how long to delay after the last bit transfer
/// before optionally deselecting the device before the next transfer.
/// @cs_change: True to deselect device before starting the next transfer.
/// @word_delay_usecs: If nonzero, how long to wait between words within one
/// transfer. This property needs explicit support in the SPI controller,
/// otherwise it is silently ignored.
///
/// This structure is mapped directly to the kernel spi_transfer structure;
/// the fields have the same meanings, except of course that the pointers
/// are in a different address space (and may be of different sizes in some
/// cases, such as 32-bit i386 userspace over a 64-bit x86_64 kernel).
/// Zero-initialize the structure, including currently unused fields, to
/// accommodate potential future updates.
///
/// SPI_IOC_MESSAGE gives userspace the equivalent of kernel spi_sync().
/// Pass it an array of related transfers, they'll execute together.
/// Each transfer may be half duplex (either direction) or full duplex.
///
/// struct spi_ioc_transfer mesg[4];
/// ...
/// status = ioctl(fd, SPI_IOC_MESSAGE(4), mesg);
///
/// So for example one transfer might send a nine bit command (right aligned
/// in a 16-bit word), the next could read a block of 8-bit data before
/// terminating that command by temporarily deselecting the chip; the next
/// could send a different nine bit command (re-selecting the chip), and the
/// last transfer might write some register values.
class spi_ioc_transfer extends ffi.Struct {
  @ffi.Uint64()
  external int tx_buf;

  @ffi.Uint64()
  external int rx_buf;

  @ffi.Uint32()
  external int len;

  @ffi.Uint32()
  external int speed_hz;

  @ffi.Uint16()
  external int delay_usecs;

  @ffi.Uint8()
  external int bits_per_word;

  @ffi.Uint8()
  external int cs_change;

  @ffi.Uint8()
  external int tx_nbits;

  @ffi.Uint8()
  external int rx_nbits;

  @ffi.Uint8()
  external int word_delay_usecs;

  @ffi.Uint8()
  external int pad;
}

const int TCGETS = 21505;

const int TCSETS = 21506;

const int TCSETSW = 21507;

const int TCSETSF = 21508;

const int TCGETA = 21509;

const int TCSETA = 21510;

const int TCSETAW = 21511;

const int TCSETAF = 21512;

const int TCSBRK = 21513;

const int TCXONC = 21514;

const int TCFLSH = 21515;

const int TCSBRKP = 21541;

const int TCGETX = 21554;

const int TCSETX = 21555;

const int TCSETXF = 21556;

const int TCSETXW = 21557;

const int EPOLL_CLOEXEC = 524288;

const int EPOLLIN = 1;

const int EPOLLPRI = 2;

const int EPOLLOUT = 4;

const int EPOLLRDNORM = 64;

const int EPOLLRDBAND = 128;

const int EPOLLWRNORM = 256;

const int EPOLLWRBAND = 512;

const int EPOLLMSG = 1024;

const int EPOLLERR = 8;

const int EPOLLHUP = 16;

const int EPOLLRDHUP = 8192;

const int EPOLLEXCLUSIVE = 268435456;

const int EPOLLWAKEUP = 536870912;

const int EPOLLONESHOT = 1073741824;

const int EPOLLET = 2147483648;

const int EPOLL_CTL_ADD = 1;

const int EPOLL_CTL_DEL = 2;

const int EPOLL_CTL_MOD = 3;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int O_DIRECTORY = 65536;

const int O_NOFOLLOW = 131072;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int VINTR = 0;

const int VQUIT = 1;

const int VERASE = 2;

const int VKILL = 3;

const int VEOF = 4;

const int VTIME = 5;

const int VMIN = 6;

const int VSWTC = 7;

const int VSTART = 8;

const int VSTOP = 9;

const int VSUSP = 10;

const int VEOL = 11;

const int VREPRINT = 12;

const int VDISCARD = 13;

const int VWERASE = 14;

const int VLNEXT = 15;

const int VEOL2 = 16;

const int IGNBRK = 1;

const int BRKINT = 2;

const int IGNPAR = 4;

const int PARMRK = 8;

const int INPCK = 16;

const int ISTRIP = 32;

const int INLCR = 64;

const int IGNCR = 128;

const int ICRNL = 256;

const int IUCLC = 512;

const int IXON = 1024;

const int IXANY = 2048;

const int IXOFF = 4096;

const int IMAXBEL = 8192;

const int OPOST = 1;

const int OLCUC = 2;

const int ONLCR = 4;

const int OCRNL = 8;

const int ONOCR = 16;

const int ONLRET = 32;

const int OFILL = 64;

const int OFDEL = 128;

const int NLDLY = 256;

const int CRDLY = 1536;

const int CR0 = 0;

const int CR1 = 512;

const int CR2 = 1024;

const int CR3 = 1536;

const int TABDLY = 6144;

const int BSDLY = 8192;

const int FFDLY = 32768;

const int VTDLY = 16384;

const int VT0 = 0;

const int VT1 = 16384;

const int B0 = 0;

const int B50 = 1;

const int B75 = 2;

const int B110 = 3;

const int B134 = 4;

const int B150 = 5;

const int B200 = 6;

const int B300 = 7;

const int B600 = 8;

const int B1200 = 9;

const int B1800 = 10;

const int B2400 = 11;

const int B4800 = 12;

const int B9600 = 13;

const int B19200 = 14;

const int B38400 = 15;

const int EXTA = 14;

const int EXTB = 15;

const int CBAUD = 4111;

const int CBAUDEX = 4096;

const int CIBAUD = 269418496;

const int CMSPAR = 1073741824;

const int CRTSCTS = 2147483648;

const int B57600 = 4097;

const int B115200 = 4098;

const int B230400 = 4099;

const int B460800 = 4100;

const int B500000 = 4101;

const int B576000 = 4102;

const int B921600 = 4103;

const int B1000000 = 4104;

const int B1152000 = 4105;

const int B1500000 = 4106;

const int B2000000 = 4107;

const int B2500000 = 4108;

const int B3000000 = 4109;

const int B3500000 = 4110;

const int B4000000 = 4111;

const int CSIZE = 48;

const int CS5 = 0;

const int CS6 = 16;

const int CS7 = 32;

const int CS8 = 48;

const int CSTOPB = 64;

const int CREAD = 128;

const int PARENB = 256;

const int PARODD = 512;

const int HUPCL = 1024;

const int CLOCAL = 2048;

const int ISIG = 1;

const int ICANON = 2;

const int XCASE = 4;

const int ECHO = 8;

const int ECHOE = 16;

const int ECHOK = 32;

const int ECHONL = 64;

const int NOFLSH = 128;

const int TOSTOP = 256;

const int ECHOCTL = 512;

const int ECHOPRT = 1024;

const int ECHOKE = 2048;

const int FLUSHO = 4096;

const int PENDIN = 16384;

const int IEXTEN = 32768;

const int EXTPROC = 65536;

const int TCOOFF = 0;

const int TCOON = 1;

const int TCIOFF = 2;

const int TCION = 3;

const int TCIFLUSH = 0;

const int TCOFLUSH = 1;

const int TCIOFLUSH = 2;

const int TCSANOW = 0;

const int TCSADRAIN = 1;

const int TCSAFLUSH = 2;

const int GPIO_MAX_NAME_SIZE = 32;

const int GPIO_V2_LINES_MAX = 64;

const int GPIO_V2_LINE_NUM_ATTRS_MAX = 10;

const int GPIOLINE_FLAG_KERNEL = 1;

const int GPIOLINE_FLAG_IS_OUT = 2;

const int GPIOLINE_FLAG_ACTIVE_LOW = 4;

const int GPIOLINE_FLAG_OPEN_DRAIN = 8;

const int GPIOLINE_FLAG_OPEN_SOURCE = 16;

const int GPIOLINE_FLAG_BIAS_PULL_UP = 32;

const int GPIOLINE_FLAG_BIAS_PULL_DOWN = 64;

const int GPIOLINE_FLAG_BIAS_DISABLE = 128;

const int GPIOHANDLES_MAX = 64;

const int GPIOHANDLE_REQUEST_INPUT = 1;

const int GPIOHANDLE_REQUEST_OUTPUT = 2;

const int GPIOHANDLE_REQUEST_ACTIVE_LOW = 4;

const int GPIOHANDLE_REQUEST_OPEN_DRAIN = 8;

const int GPIOHANDLE_REQUEST_OPEN_SOURCE = 16;

const int GPIOHANDLE_REQUEST_BIAS_PULL_UP = 32;

const int GPIOHANDLE_REQUEST_BIAS_PULL_DOWN = 64;

const int GPIOHANDLE_REQUEST_BIAS_DISABLE = 128;

const int GPIOEVENT_REQUEST_RISING_EDGE = 1;

const int GPIOEVENT_REQUEST_FALLING_EDGE = 2;

const int GPIOEVENT_REQUEST_BOTH_EDGES = 3;

const int GPIOEVENT_EVENT_RISING_EDGE = 1;

const int GPIOEVENT_EVENT_FALLING_EDGE = 2;

const int GPIO_GET_CHIPINFO_IOCTL = 2151986177;

const int GPIO_GET_LINEINFO_UNWATCH_IOCTL = 3221533708;

const int GPIO_V2_GET_LINEINFO_IOCTL = 3238048773;

const int GPIO_V2_GET_LINEINFO_WATCH_IOCTL = 3238048774;

const int GPIO_V2_GET_LINE_IOCTL = 3260068871;

const int GPIO_V2_LINE_SET_CONFIG_IOCTL = 3239097357;

const int GPIO_V2_LINE_GET_VALUES_IOCTL = 3222320142;

const int GPIO_V2_LINE_SET_VALUES_IOCTL = 3222320143;

const int GPIO_GET_LINEINFO_IOCTL = 3225990146;

const int GPIO_GET_LINEHANDLE_IOCTL = 3245126659;

const int GPIO_GET_LINEEVENT_IOCTL = 3224417284;

const int GPIOHANDLE_GET_LINE_VALUES_IOCTL = 3225465864;

const int GPIOHANDLE_SET_LINE_VALUES_IOCTL = 3225465865;

const int GPIOHANDLE_SET_CONFIG_IOCTL = 3226776586;

const int GPIO_GET_LINEINFO_WATCH_IOCTL = 3225990155;

const int SPI_CPHA = 1;

const int SPI_CPOL = 2;

const int SPI_MODE_0 = 0;

const int SPI_MODE_1 = 1;

const int SPI_MODE_2 = 2;

const int SPI_MODE_3 = 3;

const int SPI_CS_HIGH = 4;

const int SPI_LSB_FIRST = 8;

const int SPI_3WIRE = 16;

const int SPI_LOOP = 32;

const int SPI_NO_CS = 64;

const int SPI_READY = 128;

const int SPI_TX_DUAL = 256;

const int SPI_TX_QUAD = 512;

const int SPI_RX_DUAL = 1024;

const int SPI_RX_QUAD = 2048;

const int SPI_CS_WORD = 4096;

const int SPI_TX_OCTAL = 8192;

const int SPI_RX_OCTAL = 16384;

const int SPI_3WIRE_HIZ = 32768;

const int SPI_IOC_MAGIC = 107;

const int SPI_IOC_RD_MODE = 2147576577;

const int SPI_IOC_WR_MODE = 1073834753;

const int SPI_IOC_RD_LSB_FIRST = 2147576578;

const int SPI_IOC_WR_LSB_FIRST = 1073834754;

const int SPI_IOC_RD_BITS_PER_WORD = 2147576579;

const int SPI_IOC_WR_BITS_PER_WORD = 1073834755;

const int SPI_IOC_RD_MAX_SPEED_HZ = 2147773188;

const int SPI_IOC_WR_MAX_SPEED_HZ = 1074031364;

const int SPI_IOC_RD_MODE32 = 2147773189;

const int SPI_IOC_WR_MODE32 = 1074031365;

typedef Native_ioctl = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint64 __request,
);

typedef _dart_ioctl = int Function(
  int __fd,
  int __request,
);

typedef Native_epoll_create = ffi.Int32 Function(
  ffi.Int32 __size,
);

typedef _dart_epoll_create = int Function(
  int __size,
);

typedef Native_epoll_create1 = ffi.Int32 Function(
  ffi.Int32 __flags,
);

typedef _dart_epoll_create1 = int Function(
  int __flags,
);

typedef Native_epoll_ctl = ffi.Int32 Function(
  ffi.Int32 __epfd,
  ffi.Int32 __op,
  ffi.Int32 __fd,
  ffi.Pointer<epoll_event> __event,
);

typedef _dart_epoll_ctl = int Function(
  int __epfd,
  int __op,
  int __fd,
  ffi.Pointer<epoll_event> __event,
);

typedef Native_epoll_wait = ffi.Int32 Function(
  ffi.Int32 __epfd,
  ffi.Pointer<epoll_event> __events,
  ffi.Int32 __maxevents,
  ffi.Int32 __timeout,
);

typedef _dart_epoll_wait = int Function(
  int __epfd,
  ffi.Pointer<epoll_event> __events,
  int __maxevents,
  int __timeout,
);

typedef Native_errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _dart_errno_location = ffi.Pointer<ffi.Int32> Function();

typedef Native_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef Native_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef Native_read = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef Native_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetpgrp = int Function(
  int __fd,
);

typedef Native_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __pgrp_id,
);

typedef _dart_tcsetpgrp = int Function(
  int __fd,
  int __pgrp_id,
);

typedef Native_cfgetospeed = ffi.Uint32 Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_cfgetospeed = int Function(
  ffi.Pointer<termios> __termios_p,
);

typedef Native_cfgetispeed = ffi.Uint32 Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_cfgetispeed = int Function(
  ffi.Pointer<termios> __termios_p,
);

typedef Native_cfsetospeed = ffi.Int32 Function(
  ffi.Pointer<termios> __termios_p,
  ffi.Uint32 __speed,
);

typedef _dart_cfsetospeed = int Function(
  ffi.Pointer<termios> __termios_p,
  int __speed,
);

typedef Native_cfsetispeed = ffi.Int32 Function(
  ffi.Pointer<termios> __termios_p,
  ffi.Uint32 __speed,
);

typedef _dart_cfsetispeed = int Function(
  ffi.Pointer<termios> __termios_p,
  int __speed,
);

typedef Native_cfsetspeed = ffi.Int32 Function(
  ffi.Pointer<termios> __termios_p,
  ffi.Uint32 __speed,
);

typedef _dart_cfsetspeed = int Function(
  ffi.Pointer<termios> __termios_p,
  int __speed,
);

typedef Native_tcgetattr = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_tcgetattr = int Function(
  int __fd,
  ffi.Pointer<termios> __termios_p,
);

typedef Native_tcsetattr = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __optional_actions,
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_tcsetattr = int Function(
  int __fd,
  int __optional_actions,
  ffi.Pointer<termios> __termios_p,
);

typedef Native_cfmakeraw = ffi.Void Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_cfmakeraw = void Function(
  ffi.Pointer<termios> __termios_p,
);

typedef Native_tcsendbreak = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __duration,
);

typedef _dart_tcsendbreak = int Function(
  int __fd,
  int __duration,
);

typedef Native_tcdrain = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcdrain = int Function(
  int __fd,
);

typedef Native_tcflush = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __queue_selector,
);

typedef _dart_tcflush = int Function(
  int __fd,
  int __queue_selector,
);

typedef Native_tcflow = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __action,
);

typedef _dart_tcflow = int Function(
  int __fd,
  int __action,
);

typedef Native_tcgetsid = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetsid = int Function(
  int __fd,
);
